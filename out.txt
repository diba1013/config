
> @diba1013/config@0.11.1 lint /home/bdiehl/Code/linter
> eslint .

[
  {
    plugins: { jsonc: [Getter] },
    files: [ '**/*.json' ],
    ignores: [ 'package-lock.json' ]
  },
  {
    files: [ '**/*.json' ],
    languageOptions: {
      parser: {
        meta: { name: 'jsonc-eslint-parser', version: '2.4.0' },
        name: [Getter],
        parseForESLint: [Getter],
        VisitorKeys: {
          ArrayExpression: [ 'elements' ],
          ArrayPattern: [ 'elements' ],
          ArrowFunctionExpression: [ 'params', 'body' ],
          AssignmentExpression: [ 'left', 'right' ],
          AssignmentPattern: [ 'left', 'right' ],
          AwaitExpression: [ 'argument' ],
          BinaryExpression: [ 'left', 'right' ],
          BlockStatement: [ 'body' ],
          BreakStatement: [ 'label' ],
          CallExpression: [ 'callee', 'arguments' ],
          CatchClause: [ 'param', 'body' ],
          ChainExpression: [ 'expression' ],
          ClassBody: [ 'body' ],
          ClassDeclaration: [ 'id', 'superClass', 'body' ],
          ClassExpression: [ 'id', 'superClass', 'body' ],
          ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
          ContinueStatement: [ 'label' ],
          DebuggerStatement: [],
          DoWhileStatement: [ 'body', 'test' ],
          EmptyStatement: [],
          ExperimentalRestProperty: [ 'argument' ],
          ExperimentalSpreadProperty: [ 'argument' ],
          ExportAllDeclaration: [ 'exported', 'source' ],
          ExportDefaultDeclaration: [ 'declaration' ],
          ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
          ExportSpecifier: [ 'exported', 'local' ],
          ExpressionStatement: [ 'expression' ],
          ForInStatement: [ 'left', 'right', 'body' ],
          ForOfStatement: [ 'left', 'right', 'body' ],
          ForStatement: [ 'init', 'test', 'update', 'body' ],
          FunctionDeclaration: [ 'id', 'params', 'body' ],
          FunctionExpression: [ 'id', 'params', 'body' ],
          Identifier: [],
          IfStatement: [ 'test', 'consequent', 'alternate' ],
          ImportDeclaration: [ 'specifiers', 'source' ],
          ImportDefaultSpecifier: [ 'local' ],
          ImportExpression: [ 'source' ],
          ImportNamespaceSpecifier: [ 'local' ],
          ImportSpecifier: [ 'imported', 'local' ],
          JSXAttribute: [ 'name', 'value' ],
          JSXClosingElement: [ 'name' ],
          JSXClosingFragment: [],
          JSXElement: [ 'openingElement', 'children', 'closingElement' ],
          JSXEmptyExpression: [],
          JSXExpressionContainer: [ 'expression' ],
          JSXFragment: [ 'openingFragment', 'children', 'closingFragment' ],
          JSXIdentifier: [],
          JSXMemberExpression: [ 'object', 'property' ],
          JSXNamespacedName: [ 'namespace', 'name' ],
          JSXOpeningElement: [ 'name', 'attributes' ],
          JSXOpeningFragment: [],
          JSXSpreadAttribute: [ 'argument' ],
          JSXSpreadChild: [ 'expression' ],
          JSXText: [],
          LabeledStatement: [ 'label', 'body' ],
          Literal: [],
          LogicalExpression: [ 'left', 'right' ],
          MemberExpression: [ 'object', 'property' ],
          MetaProperty: [ 'meta', 'property' ],
          MethodDefinition: [ 'key', 'value' ],
          NewExpression: [ 'callee', 'arguments' ],
          ObjectExpression: [ 'properties' ],
          ObjectPattern: [ 'properties' ],
          PrivateIdentifier: [],
          Program: [ 'body' ],
          Property: [ 'key', 'value' ],
          PropertyDefinition: [ 'key', 'value' ],
          RestElement: [ 'argument' ],
          ReturnStatement: [ 'argument' ],
          SequenceExpression: [ 'expressions' ],
          SpreadElement: [ 'argument' ],
          StaticBlock: [ 'body' ],
          Super: [],
          SwitchCase: [ 'test', 'consequent' ],
          SwitchStatement: [ 'discriminant', 'cases' ],
          TaggedTemplateExpression: [ 'tag', 'quasi' ],
          TemplateElement: [],
          TemplateLiteral: [ 'quasis', 'expressions' ],
          ThisExpression: [],
          ThrowStatement: [ 'argument' ],
          TryStatement: [ 'block', 'handler', 'finalizer' ],
          UnaryExpression: [ 'argument' ],
          UpdateExpression: [ 'argument' ],
          VariableDeclaration: [ 'declarations' ],
          VariableDeclarator: [ 'id', 'init' ],
          WhileStatement: [ 'test', 'body' ],
          WithStatement: [ 'object', 'body' ],
          YieldExpression: [ 'argument' ],
          JSONExpressionStatement: [ 'expression' ],
          JSONArrayExpression: [ 'elements' ],
          JSONObjectExpression: [ 'properties' ],
          JSONProperty: [ 'key', 'value' ],
          JSONIdentifier: [],
          JSONLiteral: [],
          JSONUnaryExpression: [ 'argument' ],
          JSONTemplateLiteral: [ 'quasis', 'expressions' ],
          JSONTemplateElement: [],
          JSONBinaryExpression: [ 'left', 'right' ]
        },
        traverseNodes: [Getter],
        getStaticJSONValue: [Getter],
        isExpression: [Getter],
        isNumberIdentifier: [Getter],
        isUndefinedIdentifier: [Getter],
        parseJSON: [Function: parseJSON]
      }
    },
    rules: {
      strict: 'off',
      'no-unused-expressions': 'off',
      'no-unused-vars': 'off'
    },
    ignores: [ 'package-lock.json' ]
  },
  {
    rules: {
      'jsonc/comma-dangle': 'error',
      'jsonc/no-bigint-literals': 'error',
      'jsonc/no-binary-expression': 'error',
      'jsonc/no-binary-numeric-literals': 'error',
      'jsonc/no-comments': 'error',
      'jsonc/no-dupe-keys': 'error',
      'jsonc/no-escape-sequence-in-identifier': 'error',
      'jsonc/no-floating-decimal': 'error',
      'jsonc/no-hexadecimal-numeric-literals': 'error',
      'jsonc/no-infinity': 'error',
      'jsonc/no-multi-str': 'error',
      'jsonc/no-nan': 'error',
      'jsonc/no-number-props': 'error',
      'jsonc/no-numeric-separators': 'error',
      'jsonc/no-octal-numeric-literals': 'error',
      'jsonc/no-octal': 'error',
      'jsonc/no-parenthesized': 'error',
      'jsonc/no-plus-sign': 'error',
      'jsonc/no-regexp-literals': 'error',
      'jsonc/no-sparse-arrays': 'error',
      'jsonc/no-template-literals': 'error',
      'jsonc/no-undefined-value': 'error',
      'jsonc/no-unicode-codepoint-escapes': 'error',
      'jsonc/no-useless-escape': 'error',
      'jsonc/quote-props': 'error',
      'jsonc/quotes': 'error',
      'jsonc/space-unary-ops': 'error',
      'jsonc/valid-json-number': 'error',
      'jsonc/vue-custom-block/no-parsing-error': 'error'
    },
    files: [ '**/*.json' ],
    ignores: [ 'package-lock.json' ]
  },
  {
    rules: {
      'jsonc/array-bracket-newline': 'off',
      'jsonc/array-bracket-spacing': 'off',
      'jsonc/array-element-newline': 'off',
      'jsonc/comma-dangle': 'off',
      'jsonc/comma-style': 'off',
      'jsonc/indent': 'off',
      'jsonc/key-spacing': 'off',
      'jsonc/no-floating-decimal': 'off',
      'jsonc/object-curly-newline': 'off',
      'jsonc/object-curly-spacing': 'off',
      'jsonc/object-property-newline': 'off',
      'jsonc/quote-props': 'off',
      'jsonc/quotes': 'off',
      'jsonc/space-unary-ops': 'off'
    },
    files: [ '**/*.json' ],
    ignores: [ 'package-lock.json' ]
  },
  {
    files: [ '**/package.json' ],
    rules: {
      'jsonc/sort-keys': [
        'error',
        {
          pathPattern: '^$',
          order: [
            'name',
            'version',
            'description',
            'keywords',
            'license',
            'repository',
            'funding',
            'author',
            'packageManager',
            'engines',
            'type',
            'files',
            'exports',
            'main',
            'module',
            'unpkg',
            'bin',
            'scripts',
            'husky',
            'lint-staged',
            'peerDependencies',
            'peerDependenciesMeta',
            'dependencies',
            'devDependencies'
          ]
        },
        {
          pathPattern: '^(?:dev|peer|optional|bundled)?[Dd]ependencies$',
          order: { type: 'asc' }
        }
      ]
    }
  },
  {
    plugins: { yml: [Getter] },
    files: [ '**/*.yaml', '**/*.yml' ],
    ignores: [ 'pnpm-lock.yaml' ]
  },
  {
    files: [ '**/*.yaml', '**/*.yml' ],
    languageOptions: {
      parser: {
        meta: { name: 'yaml-eslint-parser', version: '1.2.3' },
        name: [Getter],
        ParseError: [Getter],
        parseForESLint: [Getter],
        VisitorKeys: {
          ArrayExpression: [ 'elements' ],
          ArrayPattern: [ 'elements' ],
          ArrowFunctionExpression: [ 'params', 'body' ],
          AssignmentExpression: [ 'left', 'right' ],
          AssignmentPattern: [ 'left', 'right' ],
          AwaitExpression: [ 'argument' ],
          BinaryExpression: [ 'left', 'right' ],
          BlockStatement: [ 'body' ],
          BreakStatement: [ 'label' ],
          CallExpression: [ 'callee', 'arguments' ],
          CatchClause: [ 'param', 'body' ],
          ChainExpression: [ 'expression' ],
          ClassBody: [ 'body' ],
          ClassDeclaration: [ 'id', 'superClass', 'body' ],
          ClassExpression: [ 'id', 'superClass', 'body' ],
          ConditionalExpression: [ 'test', 'consequent', 'alternate' ],
          ContinueStatement: [ 'label' ],
          DebuggerStatement: [],
          DoWhileStatement: [ 'body', 'test' ],
          EmptyStatement: [],
          ExperimentalRestProperty: [ 'argument' ],
          ExperimentalSpreadProperty: [ 'argument' ],
          ExportAllDeclaration: [ 'exported', 'source' ],
          ExportDefaultDeclaration: [ 'declaration' ],
          ExportNamedDeclaration: [ 'declaration', 'specifiers', 'source' ],
          ExportSpecifier: [ 'exported', 'local' ],
          ExpressionStatement: [ 'expression' ],
          ForInStatement: [ 'left', 'right', 'body' ],
          ForOfStatement: [ 'left', 'right', 'body' ],
          ForStatement: [ 'init', 'test', 'update', 'body' ],
          FunctionDeclaration: [ 'id', 'params', 'body' ],
          FunctionExpression: [ 'id', 'params', 'body' ],
          Identifier: [],
          IfStatement: [ 'test', 'consequent', 'alternate' ],
          ImportDeclaration: [ 'specifiers', 'source' ],
          ImportDefaultSpecifier: [ 'local' ],
          ImportExpression: [ 'source' ],
          ImportNamespaceSpecifier: [ 'local' ],
          ImportSpecifier: [ 'imported', 'local' ],
          JSXAttribute: [ 'name', 'value' ],
          JSXClosingElement: [ 'name' ],
          JSXClosingFragment: [],
          JSXElement: [ 'openingElement', 'children', 'closingElement' ],
          JSXEmptyExpression: [],
          JSXExpressionContainer: [ 'expression' ],
          JSXFragment: [ 'openingFragment', 'children', 'closingFragment' ],
          JSXIdentifier: [],
          JSXMemberExpression: [ 'object', 'property' ],
          JSXNamespacedName: [ 'namespace', 'name' ],
          JSXOpeningElement: [ 'name', 'attributes' ],
          JSXOpeningFragment: [],
          JSXSpreadAttribute: [ 'argument' ],
          JSXSpreadChild: [ 'expression' ],
          JSXText: [],
          LabeledStatement: [ 'label', 'body' ],
          Literal: [],
          LogicalExpression: [ 'left', 'right' ],
          MemberExpression: [ 'object', 'property' ],
          MetaProperty: [ 'meta', 'property' ],
          MethodDefinition: [ 'key', 'value' ],
          NewExpression: [ 'callee', 'arguments' ],
          ObjectExpression: [ 'properties' ],
          ObjectPattern: [ 'properties' ],
          PrivateIdentifier: [],
          Program: [ 'body' ],
          Property: [ 'key', 'value' ],
          PropertyDefinition: [ 'key', 'value' ],
          RestElement: [ 'argument' ],
          ReturnStatement: [ 'argument' ],
          SequenceExpression: [ 'expressions' ],
          SpreadElement: [ 'argument' ],
          StaticBlock: [ 'body' ],
          Super: [],
          SwitchCase: [ 'test', 'consequent' ],
          SwitchStatement: [ 'discriminant', 'cases' ],
          TaggedTemplateExpression: [ 'tag', 'quasi' ],
          TemplateElement: [],
          TemplateLiteral: [ 'quasis', 'expressions' ],
          ThisExpression: [],
          ThrowStatement: [ 'argument' ],
          TryStatement: [ 'block', 'handler', 'finalizer' ],
          UnaryExpression: [ 'argument' ],
          UpdateExpression: [ 'argument' ],
          VariableDeclaration: [ 'declarations' ],
          VariableDeclarator: [ 'id', 'init' ],
          WhileStatement: [ 'test', 'body' ],
          WithStatement: [ 'object', 'body' ],
          YieldExpression: [ 'argument' ],
          YAMLDocument: [ 'directives', 'content' ],
          YAMLDirective: [],
          YAMLMapping: [ 'pairs' ],
          YAMLPair: [ 'key', 'value' ],
          YAMLSequence: [ 'entries' ],
          YAMLWithMeta: [ 'anchor', 'tag', 'value' ],
          YAMLScalar: [],
          YAMLAlias: [],
          YAMLAnchor: [],
          YAMLTag: []
        },
        traverseNodes: [Getter],
        getStaticYAMLValue: [Getter],
        parseYAML: [Function: parseYAML]
      }
    },
    rules: {
      'no-irregular-whitespace': 'off',
      'no-unused-vars': 'off',
      'spaced-comment': 'off'
    },
    ignores: [ 'pnpm-lock.yaml' ]
  },
  {
    rules: {
      'yml/block-mapping-question-indicator-newline': 'error',
      'yml/block-mapping': 'error',
      'yml/block-sequence-hyphen-indicator-newline': 'error',
      'yml/block-sequence': 'error',
      'yml/flow-mapping-curly-newline': 'error',
      'yml/flow-mapping-curly-spacing': 'error',
      'yml/flow-sequence-bracket-newline': 'error',
      'yml/flow-sequence-bracket-spacing': 'error',
      'yml/indent': 'error',
      'yml/key-spacing': 'error',
      'yml/no-empty-document': 'error',
      'yml/no-empty-key': 'error',
      'yml/no-empty-mapping-value': 'error',
      'yml/no-empty-sequence-entry': 'error',
      'yml/no-irregular-whitespace': 'error',
      'yml/no-tab-indent': 'error',
      'yml/plain-scalar': 'error',
      'yml/quotes': 'error',
      'yml/spaced-comment': 'error',
      'yml/vue-custom-block/no-parsing-error': 'error'
    },
    files: [ '**/*.yaml', '**/*.yml' ],
    ignores: [ 'pnpm-lock.yaml' ]
  },
  {
    rules: {
      'yml/block-mapping-colon-indicator-newline': 'off',
      'yml/block-mapping-question-indicator-newline': 'off',
      'yml/block-sequence-hyphen-indicator-newline': 'off',
      'yml/flow-mapping-curly-newline': 'off',
      'yml/flow-mapping-curly-spacing': 'off',
      'yml/flow-sequence-bracket-newline': 'off',
      'yml/flow-sequence-bracket-spacing': 'off',
      'yml/indent': 'off',
      'yml/key-spacing': 'off',
      'yml/no-multiple-empty-lines': 'off',
      'yml/no-trailing-zeros': 'off',
      'yml/quotes': 'off'
    },
    files: [ '**/*.yaml', '**/*.yml' ],
    ignores: [ 'pnpm-lock.yaml' ]
  },
  {
    rules: {
      'constructor-super': 'error',
      'for-direction': 'error',
      'getter-return': 'error',
      'no-async-promise-executor': 'error',
      'no-case-declarations': 'error',
      'no-class-assign': 'error',
      'no-compare-neg-zero': 'error',
      'no-cond-assign': 'error',
      'no-const-assign': 'error',
      'no-constant-binary-expression': 'error',
      'no-constant-condition': 'error',
      'no-control-regex': 'error',
      'no-debugger': 'error',
      'no-delete-var': 'error',
      'no-dupe-args': 'error',
      'no-dupe-class-members': 'error',
      'no-dupe-else-if': 'error',
      'no-dupe-keys': 'error',
      'no-duplicate-case': 'error',
      'no-empty': 'error',
      'no-empty-character-class': 'error',
      'no-empty-pattern': 'error',
      'no-empty-static-block': 'error',
      'no-ex-assign': 'error',
      'no-extra-boolean-cast': 'error',
      'no-fallthrough': 'error',
      'no-func-assign': 'error',
      'no-global-assign': 'error',
      'no-import-assign': 'error',
      'no-invalid-regexp': 'error',
      'no-irregular-whitespace': 'error',
      'no-loss-of-precision': 'error',
      'no-misleading-character-class': 'error',
      'no-new-native-nonconstructor': 'error',
      'no-nonoctal-decimal-escape': 'error',
      'no-obj-calls': 'error',
      'no-octal': 'error',
      'no-prototype-builtins': 'error',
      'no-redeclare': 'error',
      'no-regex-spaces': 'error',
      'no-self-assign': 'error',
      'no-setter-return': 'error',
      'no-shadow-restricted-names': 'error',
      'no-sparse-arrays': 'error',
      'no-this-before-super': 'error',
      'no-undef': 'error',
      'no-unexpected-multiline': 'error',
      'no-unreachable': 'error',
      'no-unsafe-finally': 'error',
      'no-unsafe-negation': 'error',
      'no-unsafe-optional-chaining': 'error',
      'no-unused-labels': 'error',
      'no-unused-private-class-members': 'error',
      'no-unused-vars': 'error',
      'no-useless-backreference': 'error',
      'no-useless-catch': 'error',
      'no-useless-escape': 'error',
      'no-with': 'error',
      'require-yield': 'error',
      'use-isnan': 'error',
      'valid-typeof': 'error'
    },
    files: [ '**/*.js', '**/*.cjs', '**/*.mjs', '**/*.ts' ]
  },
  {
    plugins: {
      perfectionist: {
        rules: {
          'sort-array-includes': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted arrays before include method',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-array-includes'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    'spread-last': { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedArrayIncludesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-astro-attributes': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted Astro attributes',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-astro-attributes'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'custom-groups': { type: 'object' },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    groups: { type: 'array' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedAstroAttributesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-classes': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted classes',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-classes'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'custom-groups': { type: 'object' },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    groups: { type: 'array', default: [] }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedClassesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-enums': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted TypeScript enums',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-enums'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'partition-by-comment': {
                      default: false,
                      type: [ 'boolean', 'string', 'array' ]
                    },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedEnumsOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-exports': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted exports',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-exports'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedExportsOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-imports': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted imports',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-imports'
              },
              fixable: 'code',
              schema: [
                {
                  id: 'sort-imports',
                  type: 'object',
                  properties: {
                    'custom-groups': {
                      type: 'object',
                      properties: {
                        type: { type: 'object' },
                        value: { type: 'object' }
                      },
                      additionalProperties: false
                    },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    groups: { type: 'array', default: [] },
                    'internal-pattern': { items: { type: 'string' }, type: 'array' },
                    'newlines-between': {
                      enum: [ 'ignore', 'always', 'never' ],
                      default: 'always',
                      type: 'string'
                    },
                    'max-line-length': {
                      type: 'integer',
                      minimum: 0,
                      exclusiveMinimum: true
                    }
                  },
                  allOf: [
                    {
                      '$ref': '#/definitions/max-line-length-requires-line-length-type'
                    }
                  ],
                  additionalProperties: false,
                  dependencies: { 'max-line-length': [ 'type' ] },
                  definitions: {
                    'is-line-length': {
                      properties: {
                        type: { enum: [ 'line-length' ], type: 'string' }
                      },
                      required: [ 'type' ],
                      type: 'object'
                    },
                    'max-line-length-requires-line-length-type': {
                      anyOf: [
                        {
                          not: {
                            required: [ 'max-line-length' ],
                            type: 'object'
                          },
                          type: 'object'
                        },
                        { '$ref': '#/definitions/is-line-length' }
                      ]
                    }
                  }
                }
              ],
              messages: {
                unexpectedImportsOrder: 'Expected "{{right}}" to come before "{{left}}"',
                missedSpacingBetweenImports: 'Missed spacing between "{{left}}" and "{{right}}" imports',
                extraSpacingBetweenImports: 'Extra spacing between "{{left}}" and "{{right}}" imports'
              }
            }
          },
          'sort-interfaces': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted interface properties',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-interfaces'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'custom-groups': { type: 'object' },
                    'optionality-order': {
                      enum: [ 'ignore', 'optional-first', 'required-first' ],
                      default: 'ignore',
                      type: 'string'
                    },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    'ignore-pattern': { items: { type: 'string' }, type: 'array' },
                    groups: { type: 'array', default: [] },
                    'partition-by-new-line': { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedInterfacePropertiesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-jsx-props': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted JSX props',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-jsx-props'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'custom-groups': { type: 'object' },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    groups: { type: 'array' },
                    'ignore-case': { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedJSXPropsOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-maps': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted Map elements',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-maps'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedMapElementsOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-named-exports': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted named exports',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-named-exports'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    'group-kind': {
                      enum: [ 'mixed', 'values-first', 'types-first' ],
                      default: 'mixed',
                      type: 'string'
                    }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedNamedExportsOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-named-imports': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted named imports',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-named-imports'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    'ignore-alias': { type: 'boolean', default: false },
                    'group-kind': {
                      enum: [ 'mixed', 'values-first', 'types-first' ],
                      default: 'mixed',
                      type: 'string'
                    }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedNamedImportsOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-object-types': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted object types',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-object-types'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'custom-groups': { type: 'object' },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    groups: { type: 'array', default: [] },
                    'partition-by-new-line': { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedObjectTypesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-objects': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted objects',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-objects'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'custom-groups': { type: 'object' },
                    'partition-by-comment': {
                      type: [ 'boolean', 'string', 'array' ],
                      default: false
                    },
                    'partition-by-new-line': { type: 'boolean', default: false },
                    'styled-components': { type: 'boolean', default: true },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    'ignore-pattern': { items: { type: 'string' }, type: 'array' },
                    groups: { type: 'array' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedObjectsOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-svelte-attributes': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted Svelte attributes',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-svelte-attributes'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'custom-groups': { type: 'object' },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    groups: { type: 'array' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedSvelteAttributesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-intersection-types': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted intersection types',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-intersection-types'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedIntersectionTypesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-union-types': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted union types',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-union-types'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    'nullable-last': { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedUnionTypesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          },
          'sort-vue-attributes': {
            create: [Function: create],
            defaultOptions: [ { type: 'alphabetical', order: 'asc' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'enforce sorted Vue attributes',
                url: 'https://eslint-plugin-perfectionist.azat.io/rules/sort-vue-attributes'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'object',
                  properties: {
                    'custom-groups': { type: 'object' },
                    type: {
                      enum: [ 'alphabetical', 'natural', 'line-length' ],
                      default: 'alphabetical',
                      type: 'string'
                    },
                    order: {
                      enum: [ 'asc', 'desc' ],
                      default: 'asc',
                      type: 'string'
                    },
                    'ignore-case': { type: 'boolean', default: false },
                    groups: { type: 'array', default: [] }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unexpectedVueAttributesOrder: 'Expected "{{right}}" to come before "{{left}}"'
              }
            }
          }
        },
        configs: {
          'recommended-alphabetical': {
            rules: {
              'perfectionist/sort-imports': [
                'error',
                {
                  groups: [
                    'type',
                    [ 'builtin', 'external' ],
                    'internal-type',
                    'internal',
                    [ 'parent-type', 'sibling-type', 'index-type' ],
                    [ 'parent', 'sibling', 'index' ],
                    'object',
                    'unknown'
                  ],
                  'custom-groups': { value: {}, type: {} },
                  'newlines-between': 'always',
                  'internal-pattern': [ '~/**' ],
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-classes': [
                'error',
                {
                  groups: [
                    'index-signature',
                    'static-property',
                    'private-property',
                    'property',
                    'constructor',
                    'static-method',
                    'private-method',
                    'method',
                    [ 'get-method', 'set-method' ],
                    'unknown'
                  ],
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-objects': [
                'error',
                {
                  'partition-by-comment': false,
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-array-includes': [
                'error',
                {
                  'spread-last': true,
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-intersection-types': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-svelte-attributes': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-astro-attributes': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-vue-attributes': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-named-exports': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-named-imports': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-object-types': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-union-types': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-interfaces': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-jsx-props': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-exports': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-enums': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-maps': [
                'error',
                {
                  type: 'alphabetical',
                  order: 'asc',
                  'ignore-case': false
                }
              ]
            },
            plugins: [ 'perfectionist' ]
          },
          'recommended-natural': {
            rules: {
              'perfectionist/sort-imports': [
                'error',
                {
                  groups: [
                    'type',
                    [ 'builtin', 'external' ],
                    'internal-type',
                    'internal',
                    [ 'parent-type', 'sibling-type', 'index-type' ],
                    [ 'parent', 'sibling', 'index' ],
                    'object',
                    'unknown'
                  ],
                  'custom-groups': { value: {}, type: {} },
                  'newlines-between': 'always',
                  'internal-pattern': [ '~/**' ],
                  type: 'natural',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-classes': [
                'error',
                {
                  groups: [
                    'index-signature',
                    'static-property',
                    'private-property',
                    'property',
                    'constructor',
                    'static-method',
                    'private-method',
                    'method',
                    [ 'get-method', 'set-method' ],
                    'unknown'
                  ],
                  type: 'natural',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-objects': [
                'error',
                {
                  'partition-by-comment': false,
                  type: 'natural',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-array-includes': [
                'error',
                {
                  'spread-last': true,
                  type: 'natural',
                  order: 'asc',
                  'ignore-case': false
                }
              ],
              'perfectionist/sort-intersection-types': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-svelte-attributes': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-astro-attributes': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-vue-attributes': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-named-exports': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-named-imports': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-object-types': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-union-types': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-interfaces': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-jsx-props': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-exports': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-enums': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ],
              'perfectionist/sort-maps': [
                'error',
                { type: 'natural', order: 'asc', 'ignore-case': false }
              ]
            },
            plugins: [ 'perfectionist' ]
          },
          'recommended-line-length': {
            rules: {
              'perfectionist/sort-imports': [
                'error',
                {
                  groups: [
                    'type',
                    [ 'builtin', 'external' ],
                    'internal-type',
                    'internal',
                    [ 'parent-type', 'sibling-type', 'index-type' ],
                    [ 'parent', 'sibling', 'index' ],
                    'object',
                    'unknown'
                  ],
                  'custom-groups': { value: {}, type: {} },
                  'newlines-between': 'always',
                  'internal-pattern': [ '~/**' ],
                  type: 'line-length',
                  order: 'desc'
                }
              ],
              'perfectionist/sort-classes': [
                'error',
                {
                  groups: [
                    'index-signature',
                    'static-property',
                    'private-property',
                    'property',
                    'constructor',
                    'static-method',
                    'private-method',
                    'method',
                    [ 'get-method', 'set-method' ],
                    'unknown'
                  ],
                  type: 'line-length',
                  order: 'desc'
                }
              ],
              'perfectionist/sort-objects': [
                'error',
                {
                  'partition-by-comment': false,
                  type: 'line-length',
                  order: 'desc'
                }
              ],
              'perfectionist/sort-array-includes': [
                'error',
                {
                  'spread-last': true,
                  type: 'line-length',
                  order: 'desc'
                }
              ],
              'perfectionist/sort-intersection-types': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-svelte-attributes': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-astro-attributes': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-vue-attributes': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-named-exports': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-named-imports': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-object-types': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-union-types': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-interfaces': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-jsx-props': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-exports': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-enums': [ 'error', { type: 'line-length', order: 'desc' } ],
              'perfectionist/sort-maps': [ 'error', { type: 'line-length', order: 'desc' } ]
            },
            plugins: [ 'perfectionist' ]
          }
        },
        name: 'eslint-plugin-perfectionist'
      }
    },
    files: [ '**/*.js', '**/*.cjs', '**/*.mjs', '**/*.ts' ]
  },
  {
    languageOptions: {
      globals: {
        ArrayBuffer: false,
        DataView: false,
        Float32Array: false,
        Float64Array: false,
        Int16Array: false,
        Int32Array: false,
        Int8Array: false,
        Map: false,
        Promise: false,
        Proxy: false,
        Reflect: false,
        Set: false,
        Symbol: false,
        Uint16Array: false,
        Uint32Array: false,
        Uint8Array: false,
        Uint8ClampedArray: false,
        WeakMap: false,
        WeakSet: false,
        Atomics: false,
        SharedArrayBuffer: false,
        BigInt: false,
        BigInt64Array: false,
        BigUint64Array: false,
        globalThis: false,
        AggregateError: false,
        FinalizationRegistry: false,
        WeakRef: false
      }
    },
    name: 'unicorn/flat/recommended',
    plugins: {
      unicorn: {
        meta: { name: 'eslint-plugin-unicorn', version: '54.0.0' },
        rules: {
          'better-regex': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    sortCharacterClasses: { type: 'boolean', default: true }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Improve regexes by making them shorter, consistent, and safer.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/better-regex.md'
              },
              fixable: 'code',
              messages: {
                'better-regex': '{{original}} can be optimized to {{optimized}}.',
                'better-regex/parse-error': 'Problem parsing {{original}}: {{error}}'
              }
            },
            create: [Function: wrapped]
          },
          'catch-error-name': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    name: { type: 'string' },
                    ignore: { type: 'array', uniqueItems: true }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Enforce a specific parameter name in catch clauses.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/catch-error-name.md'
              },
              fixable: 'code',
              messages: {
                'catch-error-name': 'The catch parameter `{{originalName}}` should be named `{{fixedName}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'consistent-destructuring': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Use destructured variables over properties.',
                recommended: false,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/consistent-destructuring.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                consistentDestructuring: 'Use destructured variables over properties.',
                consistentDestructuringSuggest: 'Replace `{{expression}}` with destructured property `{{property}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'consistent-empty-array-spread': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer consistent types when spreading a ternary in an array literal.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/consistent-empty-array-spread.md'
              },
              fixable: 'code',
              messages: {
                'consistent-empty-array-spread': 'Prefer using empty {{replacementDescription}} since the {{anotherNodePosition}} is {{anotherNodeDescription}}.'
              }
            },
            create: [Function: wrapped]
          },
          'consistent-function-scoping': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    checkArrowFunctions: { type: 'boolean', default: true }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Move function definitions to the highest possible scope.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/consistent-function-scoping.md'
              },
              messages: {
                'consistent-function-scoping': 'Move {{functionNameWithKind}} to the outer scope.'
              }
            },
            create: [Function: wrapped]
          },
          'custom-error-definition': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Enforce correct `Error` subclassing.',
                recommended: false,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/custom-error-definition.md'
              },
              fixable: 'code',
              messages: {
                invalidExport: 'Exported error name should match error class'
              }
            },
            create: [Function: wrapped]
          },
          'empty-brace-spaces': {
            meta: {
              schema: [],
              type: 'layout',
              docs: {
                description: 'Enforce no spaces between braces.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/empty-brace-spaces.md'
              },
              fixable: 'whitespace',
              messages: {
                'empty-brace-spaces': 'Do not add spaces between braces.'
              }
            },
            create: [Function: wrapped]
          },
          'error-message': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Enforce passing a `message` value when creating a built-in error.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/error-message.md'
              },
              messages: {
                'missing-message': 'Pass a message to the `{{constructorName}}` constructor.',
                'message-is-empty-string': 'Error message should not be an empty string.',
                'message-is-not-a-string': 'Error message should be a string.'
              }
            },
            create: [Function: wrapped]
          },
          'escape-case': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Require escape sequences to use uppercase values.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/escape-case.md'
              },
              fixable: 'code',
              messages: {
                'escape-case': 'Use uppercase characters for the value of the escape sequence.'
              }
            },
            create: [Function: wrapped]
          },
          'expiring-todo-comments': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    terms: { type: 'array', items: { type: 'string' } },
                    ignore: { type: 'array', uniqueItems: true },
                    ignoreDatesOnPullRequests: { type: 'boolean', default: true },
                    allowWarningComments: { type: 'boolean', default: false },
                    date: { type: 'string', format: 'date' }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Add expiration conditions to TODO comments.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/expiring-todo-comments.md'
              },
              messages: {
                'unicorn/avoidMultipleDates': 'Avoid using multiple expiration dates in TODO: {{expirationDates}}. {{message}}',
                'unicorn/expiredTodo': 'There is a TODO that is past due date: {{expirationDate}}. {{message}}',
                'unicorn/reachedPackageVersion': 'There is a TODO that is past due package version: {{comparison}}. {{message}}',
                'unicorn/avoidMultiplePackageVersions': 'Avoid using multiple package versions in TODO: {{versions}}. {{message}}',
                'unicorn/havePackage': 'There is a TODO that is deprecated since you installed: {{package}}. {{message}}',
                'unicorn/dontHavePackage': 'There is a TODO that is deprecated since you uninstalled: {{package}}. {{message}}',
                'unicorn/versionMatches': 'There is a TODO match for package version: {{comparison}}. {{message}}',
                'unicorn/engineMatches': 'There is a TODO match for Node.js version: {{comparison}}. {{message}}',
                'unicorn/removeWhitespaces': "Avoid using whitespace on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                'unicorn/missingAtSymbol': "Missing '@' on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                unexpectedComment: "Unexpected '{{matchedTerm}}' comment without any conditions: '{{comment}}'."
              }
            },
            create: [Function: wrapped]
          },
          'explicit-length-check': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    'non-zero': {
                      enum: [ 'greater-than', 'not-equal' ],
                      default: 'greater-than'
                    }
                  }
                }
              ],
              type: 'problem',
              docs: {
                description: 'Enforce explicitly comparing the `length` or `size` property of a value.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/explicit-length-check.md'
              },
              fixable: 'code',
              messages: {
                'non-zero': 'Use `.{{property}} {{code}}` when checking {{property}} is not zero.',
                zero: 'Use `.{{property}} {{code}}` when checking {{property}} is zero.',
                suggestion: 'Replace `.{{property}}` with `.{{property}} {{code}}`.'
              },
              hasSuggestions: true
            },
            create: [Function: wrapped]
          },
          'filename-case': {
            meta: {
              schema: [
                {
                  oneOf: [
                    {
                      properties: {
                        case: {
                          enum: [
                            'camelCase',
                            'snakeCase',
                            'kebabCase',
                            'pascalCase'
                          ]
                        },
                        ignore: { type: 'array', uniqueItems: true },
                        multipleFileExtensions: { type: 'boolean' }
                      },
                      additionalProperties: false
                    },
                    {
                      properties: {
                        cases: {
                          properties: {
                            camelCase: { type: 'boolean' },
                            snakeCase: { type: 'boolean' },
                            kebabCase: { type: 'boolean' },
                            pascalCase: { type: 'boolean' }
                          },
                          additionalProperties: false
                        },
                        ignore: { type: 'array', uniqueItems: true },
                        multipleFileExtensions: { type: 'boolean' }
                      },
                      additionalProperties: false
                    }
                  ]
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Enforce a case style for filenames.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/filename-case.md'
              },
              messages: {
                'filename-case': 'Filename is not in {{chosenCases}}. Rename it to {{renamedFilenames}}.',
                'filename-extension': 'File extension `{{extension}}` is not in lowercase. Rename it to `{{filename}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'import-style': {
            meta: {
              schema: {
                type: 'array',
                additionalItems: false,
                items: [
                  {
                    type: 'object',
                    additionalProperties: false,
                    properties: {
                      checkImport: { type: 'boolean' },
                      checkDynamicImport: { type: 'boolean' },
                      checkExportFrom: { type: 'boolean' },
                      checkRequire: { type: 'boolean' },
                      extendDefaultStyles: { type: 'boolean' },
                      styles: { '$ref': '#/definitions/moduleStyles' }
                    }
                  }
                ],
                definitions: {
                  moduleStyles: {
                    type: 'object',
                    additionalProperties: { '$ref': '#/definitions/styles' }
                  },
                  styles: {
                    anyOf: [
                      { enum: [ false ] },
                      { '$ref': '#/definitions/booleanObject' }
                    ]
                  },
                  booleanObject: {
                    type: 'object',
                    additionalProperties: { type: 'boolean' }
                  }
                }
              },
              type: 'problem',
              docs: {
                description: 'Enforce specific import styles per module.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/import-style.md'
              },
              messages: {
                importStyle: 'Use {{allowedStyles}} import for module `{{moduleName}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'new-for-builtins': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/new-for-builtins.md'
              },
              fixable: 'code',
              messages: {
                enforce: 'Use `new {{name}}()` instead of `{{name}}()`.',
                disallow: 'Use `{{name}}()` instead of `new {{name}}()`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-abusive-eslint-disable': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce specifying rules to disable in `eslint-disable` comments.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-abusive-eslint-disable.md'
              },
              messages: {
                'no-abusive-eslint-disable': 'Specify the rules you want to disable.'
              }
            },
            create: [Function: wrapped]
          },
          'no-anonymous-default-export': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow anonymous functions and classes as the default export.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-anonymous-default-export.md'
              },
              hasSuggestions: true,
              messages: {
                'no-anonymous-default-export/error': 'The {{description}} should be named.',
                'no-anonymous-default-export/suggestion': 'Name it as `{{name}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-array-callback-reference': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Prevent passing a function reference directly to iterator methods.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-array-callback-reference.md'
              },
              hasSuggestions: true,
              messages: {
                'error-with-name': 'Do not pass function `{{name}}` directly to `.{{method}}(…)`.',
                'error-without-name': 'Do not pass function directly to `.{{method}}(…)`.',
                'replace-with-name': 'Replace function `{{name}}` with `… => {{name}}({{parameters}})`.',
                'replace-without-name': 'Replace function with `… => …({{parameters}})`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-array-for-each': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `for…of` over the `forEach` method.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-array-for-each.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'no-array-for-each/error': 'Use `for…of` instead of `.forEach(…)`.',
                'no-array-for-each/suggestion': 'Switch to `for…of`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-array-method-this-argument': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow using the `this` argument in array methods.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-array-method-this-argument.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'error-prototype-method': 'Do not use the `this` argument in `Array#{{method}}()`.',
                'error-static-method': 'Do not use the `this` argument in `Array.{{method}}()`.',
                'suggestion-remove': 'Remove this argument.',
                'suggestion-bind': 'Use a bound function.'
              }
            },
            create: [Function: wrapped]
          },
          'no-array-push-push': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: { ignore: { type: 'array', uniqueItems: true } }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Enforce combining multiple `Array#push()` into one call.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-array-push-push.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                error: 'Do not call `Array#push()` multiple times.',
                suggestion: 'Merge with previous one.'
              }
            },
            create: [Function: wrapped]
          },
          'no-array-reduce': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    allowSimpleOperations: { type: 'boolean', default: true }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Disallow `Array#reduce()` and `Array#reduceRight()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-array-reduce.md'
              },
              messages: { 'no-reduce': '`Array#{{method}}()` is not allowed' }
            },
            create: [Function: wrapped]
          },
          'no-await-expression-member': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow member access from await expression.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-await-expression-member.md'
              },
              fixable: 'code',
              messages: {
                'no-await-expression-member': 'Do not access a member directly from an await expression.'
              }
            },
            create: [Function: wrapped]
          },
          'no-await-in-promise-methods': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow using `await` in `Promise` method parameters.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-await-in-promise-methods.md'
              },
              hasSuggestions: true,
              messages: {
                'no-await-in-promise-methods/error': 'Promise in `Promise.{{method}}()` should not be awaited.',
                'no-await-in-promise-methods/suggestion': 'Remove `await`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-console-spaces': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Do not use leading/trailing space between `console.log` parameters.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-console-spaces.md'
              },
              fixable: 'code',
              messages: {
                'no-console-spaces': 'Do not use {{position}} space between `console.{{method}}` parameters.'
              }
            },
            create: [Function: wrapped]
          },
          'no-document-cookie': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Do not use `document.cookie` directly.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-document-cookie.md'
              },
              messages: {
                'no-document-cookie': 'Do not use `document.cookie` directly.'
              }
            },
            create: [Function: wrapped]
          },
          'no-empty-file': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow empty files.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-empty-file.md'
              },
              messages: { 'no-empty-file': 'Empty files are not allowed.' }
            },
            create: [Function: wrapped]
          },
          'no-for-loop': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Do not use a `for` loop that can be replaced with a `for-of` loop.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-for-loop.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'no-for-loop': 'Use a `for-of` loop instead of this `for` loop.'
              }
            },
            create: [Function: wrapped]
          },
          'no-hex-escape': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce the use of Unicode escapes instead of hexadecimal escapes.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-hex-escape.md'
              },
              fixable: 'code',
              messages: {
                'no-hex-escape': 'Use Unicode escapes instead of hexadecimal escapes.'
              }
            },
            create: [Function: wrapped]
          },
          'no-instanceof-array': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Require `Array.isArray()` instead of `instanceof Array`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-instanceof-array.md'
              },
              fixable: 'code',
              messages: {
                'no-instanceof-array': 'Use `Array.isArray()` instead of `instanceof Array`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-invalid-fetch-options': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Disallow invalid options in `fetch()` and `new Request()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-invalid-fetch-options.md'
              },
              messages: {
                'no-invalid-fetch-options': '"body" is not allowed when method is "{{method}}".'
              }
            },
            create: [Function: wrapped]
          },
          'no-invalid-remove-event-listener': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Prevent calling `EventTarget#removeEventListener()` with the result of an expression.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-invalid-remove-event-listener.md'
              },
              messages: {
                'no-invalid-remove-event-listener': 'The listener argument should be a function reference.'
              }
            },
            create: [Function: wrapped]
          },
          'no-keyword-prefix': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    disallowedPrefixes: {
                      type: 'array',
                      items: [ { type: 'string' } ],
                      minItems: 0,
                      uniqueItems: true
                    },
                    checkProperties: { type: 'boolean' },
                    onlyCamelCase: { type: 'boolean' }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Disallow identifiers starting with `new` or `class`.',
                recommended: false,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-keyword-prefix.md'
              },
              messages: {
                noKeywordPrefix: 'Do not prefix identifiers with keyword `{{keyword}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-lonely-if': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow `if` statements as the only statement in `if` blocks without `else`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-lonely-if.md'
              },
              fixable: 'code',
              messages: {
                'no-lonely-if': 'Unexpected `if` as the only statement in a `if` block without `else`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-magic-array-flat-depth': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow a magic number as the `depth` argument in `Array#flat(…).`',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-magic-array-flat-depth.md'
              },
              messages: {
                'no-magic-array-flat-depth': 'Magic number as depth is not allowed.'
              }
            },
            create: [Function: wrapped]
          },
          'no-negated-condition': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow negated conditions.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-negated-condition.md'
              },
              fixable: 'code',
              messages: {
                'no-negated-condition': 'Unexpected negated condition.'
              }
            },
            create: [Function: wrapped]
          },
          'no-negation-in-equality-check': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Disallow negated expression in equality check.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-negation-in-equality-check.md'
              },
              hasSuggestions: true,
              messages: {
                'no-negation-in-equality-check/error': 'Negated expression in not allowed in equality check.',
                'no-negation-in-equality-check/suggestion': "Switch to '{{operator}}' check."
              }
            },
            create: [Function: wrapped]
          },
          'no-nested-ternary': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow nested ternary expressions.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-nested-ternary.md'
              },
              fixable: 'code',
              messages: {
                'too-deep': 'Do not nest ternary expressions.',
                'should-parenthesized': 'Nest ternary expression should be parenthesized.'
              }
            },
            create: [Function: wrapped]
          },
          'no-new-array': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow `new Array()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-new-array.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                error: 'Do not use `new Array()`.',
                'array-length': 'The argument is the length of array.',
                'only-element': 'The argument is the only element of array.',
                spread: 'Spread the argument.'
              }
            },
            create: [Function: wrapped]
          },
          'no-new-buffer': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-new-buffer.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                error: '`new Buffer()` is deprecated, use `Buffer.{{method}}()` instead.',
                'error-unknown': '`new Buffer()` is deprecated, use `Buffer.alloc()` or `Buffer.from()` instead.',
                suggestion: 'Switch to `Buffer.{{replacement}}()`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-null': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    checkStrictEquality: { type: 'boolean', default: false }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Disallow the use of the `null` literal.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-null.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                error: 'Use `undefined` instead of `null`.',
                replace: 'Replace `null` with `undefined`.',
                remove: 'Remove `null`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-object-as-default-parameter': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Disallow the use of objects as default parameters.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-object-as-default-parameter.md'
              },
              messages: {
                identifier: 'Do not use an object literal as default for parameter `{{parameter}}`.',
                'non-identifier': 'Do not use an object literal as default.'
              }
            },
            create: [Function: wrapped]
          },
          'no-process-exit': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow `process.exit()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-process-exit.md'
              },
              messages: {
                'no-process-exit': 'Only use `process.exit()` in CLI apps. Throw an error instead.'
              }
            },
            create: [Function: wrapped]
          },
          'no-single-promise-in-promise-methods': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow passing single-element arrays to `Promise` methods.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-single-promise-in-promise-methods.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'no-single-promise-in-promise-methods/error': 'Wrapping single-element array with `Promise.{{method}}()` is unnecessary.',
                'no-single-promise-in-promise-methods/unwrap': 'Use the value directly.',
                'no-single-promise-in-promise-methods/use-promise-resolve': 'Switch to `Promise.resolve(…)`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-static-only-class': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow classes that only have static members.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-static-only-class.md'
              },
              fixable: 'code',
              messages: {
                'no-static-only-class': 'Use an object instead of a class with only static members.'
              }
            },
            create: [Function: wrapped]
          },
          'no-thenable': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Disallow `then` property.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-thenable.md'
              },
              messages: {
                'no-thenable-object': 'Do not add `then` to an object.',
                'no-thenable-export': 'Do not export `then`.',
                'no-thenable-class': 'Do not add `then` to a class.'
              }
            },
            create: [Function: wrapped]
          },
          'no-this-assignment': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow assigning `this` to a variable.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-this-assignment.md'
              },
              messages: {
                'no-this-assignment': 'Do not assign `this` to `{{name}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-typeof-undefined': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    checkGlobalVariables: { type: 'boolean', default: false }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Disallow comparing `undefined` using `typeof`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-typeof-undefined.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'no-typeof-undefined/error': 'Compare with `undefined` directly instead of using `typeof`.',
                'no-typeof-undefined/suggestion': 'Switch to `… {{operator}} undefined`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-unnecessary-await': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow awaiting non-promise values.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-unnecessary-await.md'
              },
              fixable: 'code',
              messages: {
                'no-unnecessary-await': 'Do not `await` non-promise value.'
              }
            },
            create: [Function: wrapped]
          },
          'no-unnecessary-polyfills': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  required: [ 'targets' ],
                  properties: {
                    targets: {
                      oneOf: [
                        { type: 'string' },
                        { type: 'array' },
                        { type: 'object' }
                      ]
                    }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Enforce the use of built-in methods instead of unnecessary polyfills.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-unnecessary-polyfills.md'
              },
              messages: {
                unnecessaryPolyfill: 'Use built-in instead.',
                unnecessaryCoreJsModule: 'All polyfilled features imported from `{{coreJsModule}}` are available as built-ins. Use the built-ins instead.'
              }
            },
            create: [Function: wrapped]
          },
          'no-unreadable-array-destructuring': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow unreadable array destructuring.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-unreadable-array-destructuring.md'
              },
              fixable: 'code',
              messages: {
                'no-unreadable-array-destructuring': 'Array destructuring may not contain consecutive ignored values.'
              }
            },
            create: [Function: wrapped]
          },
          'no-unreadable-iife': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow unreadable IIFEs.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-unreadable-iife.md'
              },
              hasSuggestions: false,
              messages: {
                'no-unreadable-iife': 'IIFE with parenthesized arrow function body is considered unreadable.'
              }
            },
            create: [Function: wrapped]
          },
          'no-unused-properties': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow unused object properties.',
                recommended: false,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-unused-properties.md'
              },
              messages: {
                'no-unused-properties': 'Property `{{name}}` is defined but never used.'
              }
            },
            create: [Function: wrapped]
          },
          'no-useless-fallback-in-spread': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow useless fallback when spreading in object literals.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-useless-fallback-in-spread.md'
              },
              fixable: 'code',
              messages: {
                'no-useless-fallback-in-spread': 'The empty object is useless.'
              }
            },
            create: [Function: wrapped]
          },
          'no-useless-length-check': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow useless array length check.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-useless-length-check.md'
              },
              fixable: 'code',
              messages: {
                'non-zero': 'The non-empty check is useless as `Array#some()` returns `false` for an empty array.',
                zero: 'The empty check is useless as `Array#every()` returns `true` for an empty array.'
              }
            },
            create: [Function: wrapped]
          },
          'no-useless-promise-resolve-reject': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-useless-promise-resolve-reject.md'
              },
              fixable: 'code',
              messages: {
                resolve: 'Prefer `{{type}} value` over `{{type}} Promise.resolve(value)`.',
                reject: 'Prefer `throw error` over `{{type}} Promise.reject(error)`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-useless-spread': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow unnecessary spread.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-useless-spread.md'
              },
              fixable: 'code',
              messages: {
                'spread-in-list': 'Spread an {{argumentType}} literal in {{parentDescription}} is unnecessary.',
                'iterable-to-array': "`{{parentDescription}}` accepts iterable as argument, it's unnecessary to convert to an array.",
                'iterable-to-array-in-for-of': "`for…of` can iterate over iterable, it's unnecessary to convert to an array.",
                'iterable-to-array-in-yield-star': "`yield*` can delegate iterable, it's unnecessary to convert to an array.",
                'clone-array': 'Unnecessarily cloning an array.'
              }
            },
            create: [Function: wrapped]
          },
          'no-useless-switch-case': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow useless case in switch statements.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-useless-switch-case.md'
              },
              hasSuggestions: true,
              messages: {
                'no-useless-switch-case/error': 'Useless case in switch statement.',
                'no-useless-switch-case/suggestion': 'Remove this case.'
              }
            },
            create: [Function: wrapped]
          },
          'no-useless-undefined': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    checkArguments: { type: 'boolean' },
                    checkArrowFunctionBody: { type: 'boolean' }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Disallow useless `undefined`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-useless-undefined.md'
              },
              fixable: 'code',
              messages: {
                'no-useless-undefined': 'Do not use useless `undefined`.'
              }
            },
            create: [Function: wrapped]
          },
          'no-zero-fractions': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Disallow number literals with zero fractions or dangling dots.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/no-zero-fractions.md'
              },
              fixable: 'code',
              messages: {
                'zero-fraction': "Don't use a zero fraction in the number.",
                'dangling-dot': "Don't use a dangling dot in the number."
              }
            },
            create: [Function: wrapped]
          },
          'number-literal-case': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce proper case for numeric literals.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/number-literal-case.md'
              },
              fixable: 'code',
              messages: {
                'number-literal-case': 'Invalid number literal casing.'
              }
            },
            create: [Function: wrapped]
          },
          'numeric-separators-style': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    binary: {
                      type: 'object',
                      additionalProperties: false,
                      properties: {
                        onlyIfContainsSeparator: { type: 'boolean' },
                        minimumDigits: { type: 'integer', minimum: 0, default: 0 },
                        groupLength: { type: 'integer', minimum: 1, default: 4 }
                      }
                    },
                    octal: {
                      type: 'object',
                      additionalProperties: false,
                      properties: {
                        onlyIfContainsSeparator: { type: 'boolean' },
                        minimumDigits: { type: 'integer', minimum: 0, default: 0 },
                        groupLength: { type: 'integer', minimum: 1, default: 4 }
                      }
                    },
                    hexadecimal: {
                      type: 'object',
                      additionalProperties: false,
                      properties: {
                        onlyIfContainsSeparator: { type: 'boolean' },
                        minimumDigits: { type: 'integer', minimum: 0, default: 0 },
                        groupLength: { type: 'integer', minimum: 1, default: 2 }
                      }
                    },
                    number: {
                      type: 'object',
                      additionalProperties: false,
                      properties: {
                        onlyIfContainsSeparator: { type: 'boolean' },
                        minimumDigits: { type: 'integer', minimum: 0, default: 5 },
                        groupLength: { type: 'integer', minimum: 1, default: 3 }
                      }
                    },
                    onlyIfContainsSeparator: { type: 'boolean', default: false }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Enforce the style of numeric separators by correctly grouping digits.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/numeric-separators-style.md'
              },
              fixable: 'code',
              messages: {
                'numeric-separators-style': 'Invalid group length in numeric value.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-add-event-listener': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    excludedPackages: {
                      type: 'array',
                      items: { type: 'string' },
                      uniqueItems: true
                    }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-add-event-listener.md'
              },
              fixable: 'code',
              messages: {
                'prefer-add-event-listener': 'Prefer `{{replacement}}` over `{{method}}`.{{extra}}'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-array-find': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: { checkFromLast: { type: 'boolean', default: true } }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-array-find.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'error-variable': 'Prefer `.find(…)` over `.filter(…)`.',
                'error-zero-index': 'Prefer `.find(…)` over `.filter(…)[0]`.',
                'error-at-zero': 'Prefer `.find(…)` over `.filter(…).at(0)`.',
                'error-shift': 'Prefer `.find(…)` over `.filter(…).shift()`.',
                'error-pop': 'Prefer `.findLast(…)` over `.filter(…).pop()`.',
                'error-at-minus-one': 'Prefer `.findLast(…)` over `.filter(…).at(-1)`.',
                'error-destructuring-declaration': 'Prefer `.find(…)` over destructuring `.filter(…)`.',
                'error-destructuring-assignment': 'Prefer `.find(…)` over destructuring `.filter(…)`.',
                'suggest-nullish-coalescing-operator': 'Replace `.filter(…)` with `.find(…) ?? …`.',
                'suggest-logical-or-operator': 'Replace `.filter(…)` with `.find(…) || …`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-array-flat-map': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.flatMap(…)` over `.map(…).flat()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-array-flat-map.md'
              },
              fixable: 'code',
              messages: {
                'prefer-array-flat-map': 'Prefer `.flatMap(…)` over `.map(…).flat()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-array-flat': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: { functions: { type: 'array', uniqueItems: true } }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer `Array#flat()` over legacy techniques to flatten arrays.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-array-flat.md'
              },
              fixable: 'code',
              messages: {
                'prefer-array-flat': 'Prefer `Array#flat()` over `{{description}}` to flatten an array.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-array-index-of': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-array-index-of.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'prefer-indexOf-over-findIndex/error': 'Use `.indexOf()` instead of `.findIndex()` when looking for the index of an item.',
                'prefer-indexOf-over-findIndex/suggestion': 'Replace `.findIndex()` with `.indexOf()`.',
                'prefer-lastIndexOf-over-findLastIndex/error': 'Use `.lastIndexOf()` instead of `findLastIndex() when looking for the index of an item.`',
                'prefer-lastIndexOf-over-findLastIndex/suggestion': 'Replace `.findLastIndex()` with `.lastIndexOf()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-array-some': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast,findIndex,findLastIndex}(…)`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-array-some.md'
              },
              fixable: 'code',
              messages: {
                some: 'Prefer `.some(…)` over `.{{method}}(…)`.',
                'some-suggestion': 'Replace `.{{method}}(…)` with `.some(…)`.',
                filter: 'Prefer `.some(…)` over non-zero length check from `.filter(…)`.'
              },
              hasSuggestions: true
            },
            create: [Function: wrapped]
          },
          'prefer-at': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    getLastElementFunctions: { type: 'array', uniqueItems: true },
                    checkAllIndexAccess: { type: 'boolean', default: false }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.at()` method for index access and `String#charAt()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-at.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'negative-index': 'Prefer `.at(…)` over `[….length - index]`.',
                index: 'Prefer `.at(…)` over index access.',
                'string-char-at-negative': 'Prefer `String#at(…)` over `String#charAt(….length - index)`.',
                'string-char-at': 'Prefer `String#at(…)` over `String#charAt(…)`.',
                slice: 'Prefer `.at(…)` over the first element from `.slice(…)`.',
                'get-last-function': 'Prefer `.at(-1)` over `{{description}}(…)` to get the last element.',
                'use-at': 'Use `.at(…)`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-blob-reading-methods': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-blob-reading-methods.md'
              },
              messages: {
                error: 'Prefer `Blob#{{replacement}}()` over `FileReader#{{method}}(blob)`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-code-point': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-code-point.md'
              },
              hasSuggestions: true,
              messages: {
                'error/charCodeAt': 'Prefer `String#codePointAt()` over `String#charCodeAt()`.',
                'error/fromCharCode': 'Prefer `String.fromCodePoint()` over `String.fromCharCode()`.',
                'suggestion/codePointAt': 'Use `String#codePointAt()`.',
                'suggestion/fromCodePoint': 'Use `String.fromCodePoint()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-date-now': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-date-now.md'
              },
              fixable: 'code',
              messages: {
                'prefer-date': 'Prefer `Date.now()` over `new Date()`.',
                'prefer-date-now-over-methods': 'Prefer `Date.now()` over `Date#{{method}}()`.',
                'prefer-date-now-over-number-data-object': 'Prefer `Date.now()` over `Number(new Date())`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-default-parameters': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer default parameters over reassignment.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-default-parameters.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                preferDefaultParameters: 'Prefer default parameters over reassignment.',
                preferDefaultParametersSuggest: 'Replace reassignment with default parameter.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-dom-node-append': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `Node#append()` over `Node#appendChild()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-dom-node-append.md'
              },
              fixable: 'code',
              messages: {
                'prefer-dom-node-append': 'Prefer `Node#append()` over `Node#appendChild()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-dom-node-dataset': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer using `.dataset` on DOM elements over calling attribute methods.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-dom-node-dataset.md'
              },
              fixable: 'code',
              messages: {
                'prefer-dom-node-dataset': 'Prefer `.dataset` over `{{method}}(…)`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-dom-node-remove': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-dom-node-remove.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                error: 'Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.',
                suggestion: 'Replace `parentNode.removeChild(childNode)` with `childNode{{dotOrQuestionDot}}remove()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-dom-node-text-content': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.textContent` over `.innerText`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-dom-node-text-content.md'
              },
              hasSuggestions: true,
              messages: {
                error: 'Prefer `.textContent` over `.innerText`.',
                suggestion: 'Switch to `.textContent`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-event-target': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `EventTarget` over `EventEmitter`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-event-target.md'
              },
              messages: {
                'prefer-event-target': 'Prefer `EventTarget` over `EventEmitter`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-export-from': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    ignoreUsedVariables: { type: 'boolean', default: false }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer `export…from` when re-exporting.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-export-from.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                error: 'Use `export…from` to re-export `{{exported}}`.',
                suggestion: 'Switch to `export…from`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-includes': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.includes()` over `.indexOf()`, `.lastIndexOf()`, and `Array#some()` when checking for existence or non-existence.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-includes.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'prefer-includes': 'Use `.includes()`, rather than `.{{method}}()`, when checking for existence.',
                'prefer-includes-over-some/error': 'Use `.includes()` instead of `.some()` when checking value existence.',
                'prefer-includes-over-some/suggestion': 'Replace `.some()` with `.includes()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-json-parse-buffer': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer reading a JSON file as a buffer.',
                recommended: false,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-json-parse-buffer.md'
              },
              fixable: 'code',
              messages: {
                'prefer-json-parse-buffer': 'Prefer reading the JSON file as a buffer.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-keyboard-event-key': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-keyboard-event-key.md'
              },
              fixable: 'code',
              messages: {
                'prefer-keyboard-event-key': 'Use `.key` instead of `.{{name}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-logical-operator-over-ternary': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer using a logical operator over a ternary.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-logical-operator-over-ternary.md'
              },
              hasSuggestions: true,
              messages: {
                'prefer-logical-operator-over-ternary/error': 'Prefer using a logical operator over a ternary.',
                'prefer-logical-operator-over-ternary/suggestion': 'Switch to `{{operator}}` operator.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-math-trunc': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce the use of `Math.trunc` instead of bitwise operators.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-math-trunc.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'error-bitwise': 'Use `Math.trunc` instead of `{{operator}} {{value}}`.',
                'error-bitwise-not': 'Use `Math.trunc` instead of `~~`.',
                'suggestion-bitwise': 'Replace `{{operator}} {{value}}` with `Math.trunc`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-modern-dom-apis': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-modern-dom-apis.md'
              },
              fixable: 'code',
              messages: {
                replaceChildOrInsertBefore: 'Prefer `{{oldChildNode}}.{{preferredMethod}}({{newChildNode}})` over `{{parentNode}}.{{method}}({{newChildNode}}, {{oldChildNode}})`.',
                insertAdjacentTextOrInsertAdjacentElement: 'Prefer `{{reference}}.{{preferredMethod}}({{content}})` over `{{reference}}.{{method}}({{position}}, {{content}})`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-modern-math-apis': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer modern `Math` APIs over legacy patterns.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-modern-math-apis.md'
              },
              fixable: 'code',
              messages: {
                'prefer-modern-math-apis': 'Prefer `{{replacement}}` over `{{description}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-module': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer JavaScript modules (ESM) over CommonJS.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-module.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'error/use-strict-directive': 'Do not use "use strict" directive.',
                'error/global-return': '"return" should be used inside a function.',
                'error/identifier': 'Do not use "{{name}}".',
                'suggestion/use-strict-directive': 'Remove "use strict" directive.',
                'suggestion/import-meta-dirname': 'Replace `__dirname` with `import.meta.dirname`.',
                'suggestion/import-meta-url-to-dirname': 'Replace `__dirname` with `…(import.meta.url)`.',
                'suggestion/import-meta-filename': 'Replace `__filename` with `import.meta.filename`.',
                'suggestion/import-meta-url-to-filename': 'Replace `__filename` with `…(import.meta.url)`.',
                'suggestion/import': 'Switch to `import`.',
                'suggestion/export': 'Switch to `export`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-native-coercion-functions': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-native-coercion-functions.md'
              },
              fixable: 'code',
              messages: {
                'prefer-native-coercion-functions': '{{functionNameWithKind}} is equivalent to `{{replacementFunction}}`. Use `{{replacementFunction}}` directly.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-negative-index': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer negative index over `.length - index` when possible.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-negative-index.md'
              },
              fixable: 'code',
              messages: {
                'prefer-negative-index': 'Prefer negative index over length minus index for `{{method}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-node-protocol': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer using the `node:` protocol when importing Node.js builtin modules.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-node-protocol.md'
              },
              fixable: 'code',
              messages: {
                'prefer-node-protocol': 'Prefer `node:{{moduleName}}` over `{{moduleName}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-number-properties': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    checkInfinity: { type: 'boolean', default: false },
                    checkNaN: { type: 'boolean', default: true }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer `Number` static properties over global ones.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-number-properties.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                error: 'Prefer `Number.{{property}}` over `{{description}}`.',
                suggestion: 'Replace `{{description}}` with `Number.{{property}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-object-from-entries': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: { functions: { type: 'array', uniqueItems: true } }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-object-from-entries.md'
              },
              fixable: 'code',
              messages: {
                reduce: 'Prefer `Object.fromEntries()` over `Array#reduce()`.',
                function: 'Prefer `Object.fromEntries()` over `{{functionName}}()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-optional-catch-binding': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer omitting the `catch` binding parameter.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-optional-catch-binding.md'
              },
              fixable: 'code',
              messages: {
                'with-name': 'Remove unused catch binding `{{name}}`.',
                'without-name': 'Remove unused catch binding.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-prototype-methods': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer borrowing methods from the prototype instead of the instance.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-prototype-methods.md'
              },
              fixable: 'code',
              messages: {
                'known-method': 'Prefer using `{{constructorName}}.prototype.{{methodName}}`.',
                'unknown-method': 'Prefer using method from `{{constructorName}}.prototype`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-query-selector': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-query-selector.md'
              },
              fixable: 'code',
              messages: {
                'prefer-query-selector': 'Prefer `.{{replacement}}()` over `.{{method}}()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-reflect-apply': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `Reflect.apply()` over `Function#apply()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-reflect-apply.md'
              },
              fixable: 'code',
              messages: {
                'prefer-reflect-apply': 'Prefer `Reflect.apply()` over `Function#apply()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-regexp-test': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-regexp-test.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'regexp-exec': 'Prefer `.test(…)` over `.exec(…)`.',
                'string-match': 'Prefer `RegExp#test(…)` over `String#match(…)`.',
                suggestion: 'Switch to `RegExp#test(…)`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-set-has': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-set-has.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                error: '`{{name}}` should be a `Set`, and use `{{name}}.has()` to check existence or non-existence.',
                suggestion: 'Switch `{{name}}` to `Set`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-set-size': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer using `Set#size` instead of `Array#length`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-set-size.md'
              },
              fixable: 'code',
              messages: {
                'prefer-set-size': 'Prefer using `Set#size` instead of `Array#length`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-spread': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-spread.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'array-from': 'Prefer the spread operator over `Array.from(…)`.',
                'array-concat': 'Prefer the spread operator over `Array#concat(…)`.',
                'array-slice': 'Prefer the spread operator over `Array#slice()`.',
                'array-to-spliced': 'Prefer the spread operator over `Array#toSpliced()`.',
                'string-split': "Prefer the spread operator over `String#split('')`.",
                'argument-is-spreadable': 'First argument is an `array`.',
                'argument-is-not-spreadable': 'First argument is not an `array`.',
                'test-argument': 'Test first argument with `Array.isArray(…)`.',
                'spread-all-arguments': 'Spread all unknown arguments`.',
                'use-spread': 'Use `...` operator.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-string-raw': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer using the `String.raw` tag to avoid escaping `\\`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-string-raw.md'
              },
              fixable: 'code',
              messages: {
                'prefer-string-raw': '`String.raw` should be used to avoid escaping `\\`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-string-replace-all': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `String#replaceAll()` over regex searches with the global flag.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-string-replace-all.md'
              },
              fixable: 'code',
              messages: {
                method: 'Prefer `String#replaceAll()` over `String#replace()`.',
                pattern: 'This pattern can be replaced with {{replacement}}.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-string-slice': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `String#slice()` over `String#substr()` and `String#substring()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-string-slice.md'
              },
              fixable: 'code',
              messages: {
                substr: 'Prefer `String#slice()` over `String#substr()`.',
                substring: 'Prefer `String#slice()` over `String#substring()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-string-starts-ends-with': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-string-starts-ends-with.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'prefer-starts-with': 'Prefer `String#startsWith()` over a regex with `^`.',
                'prefer-ends-with': 'Prefer `String#endsWith()` over a regex with `$`.',
                useStringCasting: 'Convert to string `String(…).{{method}}()`.',
                useOptionalChaining: 'Use optional chaining `…?.{{method}}()`.',
                useNullishCoalescing: "Use nullish coalescing `(… ?? '').{{method}}()`."
              }
            },
            create: [Function: wrapped]
          },
          'prefer-string-trim-start-end': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-string-trim-start-end.md'
              },
              fixable: 'code',
              messages: {
                'prefer-string-trim-start-end': 'Prefer `String#{{replacement}}()` over `String#{{method}}()`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-structured-clone': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: { functions: { type: 'array', uniqueItems: true } }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer using `structuredClone` to create a deep clone.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-structured-clone.md'
              },
              hasSuggestions: true,
              messages: {
                'prefer-structured-clone/error': 'Prefer `structuredClone(…)` over `{{description}}` to create a deep clone.',
                'prefer-structured-clone/suggestion': 'Switch to `structuredClone(…)`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-switch': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    minimumCases: { type: 'integer', minimum: 2, default: 3 },
                    emptyDefaultCase: {
                      enum: [
                        'no-default-comment',
                        'do-nothing-comment',
                        'no-default-case'
                      ],
                      default: 'no-default-comment'
                    }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer `switch` over multiple `else-if`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-switch.md'
              },
              fixable: 'code',
              messages: {
                'prefer-switch': 'Use `switch` instead of multiple `else-if`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-ternary': {
            meta: {
              schema: [
                {
                  enum: [ 'always', 'only-single-line' ],
                  default: 'always'
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Prefer ternary expressions over simple `if-else` statements.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-ternary.md'
              },
              fixable: 'code',
              messages: {
                'prefer-ternary': 'This `if` statement can be replaced by a ternary expression.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-top-level-await': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Prefer top-level await over top-level promises and async function calls.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-top-level-await.md'
              },
              hasSuggestions: true,
              messages: {
                promise: 'Prefer top-level await over using a promise chain.',
                iife: 'Prefer top-level await over an async IIFE.',
                identifier: 'Prefer top-level await over an async function `{{name}}` call.',
                'add-await': 'Insert `await`.'
              }
            },
            create: [Function: wrapped]
          },
          'prefer-type-error': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce throwing `TypeError` in type checking conditions.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prefer-type-error.md'
              },
              fixable: 'code',
              messages: {
                'prefer-type-error': '`new Error()` is too unspecific for a type check. Use `new TypeError()` instead.'
              }
            },
            create: [Function: wrapped]
          },
          'prevent-abbreviations': {
            meta: {
              schema: {
                type: 'array',
                additionalItems: false,
                items: [
                  {
                    type: 'object',
                    additionalProperties: false,
                    properties: {
                      checkProperties: { type: 'boolean' },
                      checkVariables: { type: 'boolean' },
                      checkDefaultAndNamespaceImports: {
                        type: [ 'boolean', 'string' ],
                        pattern: 'internal'
                      },
                      checkShorthandImports: {
                        type: [ 'boolean', 'string' ],
                        pattern: 'internal'
                      },
                      checkShorthandProperties: { type: 'boolean' },
                      checkFilenames: { type: 'boolean' },
                      extendDefaultReplacements: { type: 'boolean' },
                      replacements: { '$ref': '#/definitions/abbreviations' },
                      extendDefaultAllowList: { type: 'boolean' },
                      allowList: { '$ref': '#/definitions/booleanObject' },
                      ignore: { type: 'array', uniqueItems: true }
                    }
                  }
                ],
                definitions: {
                  abbreviations: {
                    type: 'object',
                    additionalProperties: { '$ref': '#/definitions/replacements' }
                  },
                  replacements: {
                    anyOf: [
                      { enum: [ false ] },
                      { '$ref': '#/definitions/booleanObject' }
                    ]
                  },
                  booleanObject: {
                    type: 'object',
                    additionalProperties: { type: 'boolean' }
                  }
                }
              },
              type: 'suggestion',
              docs: {
                description: 'Prevent abbreviations.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/prevent-abbreviations.md'
              },
              fixable: 'code',
              messages: {
                replace: 'The {{nameTypeText}} `{{discouragedName}}` should be named `{{replacement}}`. A more descriptive name will do too.',
                suggestion: 'Please rename the {{nameTypeText}} `{{discouragedName}}`. Suggested names are: {{replacementsText}}. A more descriptive name will do too.'
              }
            },
            create: [Function: wrapped]
          },
          'relative-url-style': {
            meta: {
              schema: [ { enum: [ 'never', 'always' ], default: 'never' } ],
              type: 'suggestion',
              docs: {
                description: 'Enforce consistent relative URL style.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/relative-url-style.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                never: 'Remove the `./` prefix from the relative URL.',
                always: 'Add a `./` prefix to the relative URL.',
                remove: 'Remove leading `./`.'
              }
            },
            create: [Function: wrapped]
          },
          'require-array-join-separator': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce using the separator argument with `Array#join()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/require-array-join-separator.md'
              },
              fixable: 'code',
              messages: {
                'require-array-join-separator': 'Missing the separator argument.'
              }
            },
            create: [Function: wrapped]
          },
          'require-number-to-fixed-digits-argument': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce using the digits argument with `Number#toFixed()`.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/require-number-to-fixed-digits-argument.md'
              },
              fixable: 'code',
              messages: {
                'require-number-to-fixed-digits-argument': 'Missing the digits argument.'
              }
            },
            create: [Function: wrapped]
          },
          'require-post-message-target-origin': {
            meta: {
              schema: [],
              type: 'problem',
              docs: {
                description: 'Enforce using the `targetOrigin` argument with `window.postMessage()`.',
                recommended: false,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/require-post-message-target-origin.md'
              },
              hasSuggestions: true,
              messages: {
                error: 'Missing the `targetOrigin` argument.',
                suggestion: 'Use `{{code}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'string-content': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    patterns: {
                      type: 'object',
                      additionalProperties: {
                        anyOf: [
                          { type: 'string' },
                          {
                            type: 'object',
                            required: [ 'suggest' ],
                            properties: {
                              suggest: { type: 'string' },
                              fix: { type: 'boolean' },
                              message: { type: 'string' }
                            },
                            additionalProperties: false
                          }
                        ]
                      }
                    }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Enforce better string content.',
                recommended: false,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/string-content.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: { replace: 'Replace `{{match}}` with `{{suggest}}`.' }
            },
            create: [Function: wrapped]
          },
          'switch-case-braces': {
            meta: {
              schema: [ { enum: [ 'always', 'avoid' ] } ],
              type: 'layout',
              docs: {
                description: 'Enforce consistent brace style for `case` clauses.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/switch-case-braces.md'
              },
              fixable: 'code',
              messages: {
                'switch-case-braces/empty': 'Unexpected braces in empty case clause.',
                'switch-case-braces/missing': 'Missing braces in case clause.',
                'switch-case-braces/unnecessary': 'Unnecessary braces in case clause.'
              }
            },
            create: [Function: wrapped]
          },
          'template-indent': {
            meta: {
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    indent: {
                      oneOf: [
                        { type: 'string', pattern: '^\\s+$' },
                        { type: 'integer', minimum: 1 }
                      ]
                    },
                    tags: {
                      type: 'array',
                      uniqueItems: true,
                      items: { type: 'string' }
                    },
                    functions: {
                      type: 'array',
                      uniqueItems: true,
                      items: { type: 'string' }
                    },
                    selectors: {
                      type: 'array',
                      uniqueItems: true,
                      items: { type: 'string' }
                    },
                    comments: {
                      type: 'array',
                      uniqueItems: true,
                      items: { type: 'string' }
                    }
                  }
                }
              ],
              type: 'suggestion',
              docs: {
                description: 'Fix whitespace-insensitive template indentation.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/template-indent.md'
              },
              fixable: 'code',
              messages: {
                'template-indent': 'Templates should be properly indented.'
              }
            },
            create: [Function: wrapped]
          },
          'text-encoding-identifier-case': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Enforce consistent case for text encoding identifiers.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/text-encoding-identifier-case.md'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                'text-encoding-identifier/error': 'Prefer `{{replacement}}` over `{{value}}`.',
                'text-encoding-identifier/suggestion': 'Replace `{{value}}` with `{{replacement}}`.'
              }
            },
            create: [Function: wrapped]
          },
          'throw-new-error': {
            meta: {
              schema: [],
              type: 'suggestion',
              docs: {
                description: 'Require `new` when creating an error.',
                recommended: true,
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/rules/throw-new-error.md'
              },
              fixable: 'code',
              messages: {
                'throw-new-error': 'Use `new` when creating an error.'
              }
            },
            create: [Function: wrapped]
          },
          'import-index': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#import-index'
              },
              deprecated: true,
              replacedBy: []
            }
          },
          'no-array-instanceof': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#no-array-instanceof'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/no-instanceof-array' ]
            }
          },
          'no-fn-reference-in-iterator': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#no-fn-reference-in-iterator'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/no-array-callback-reference' ]
            }
          },
          'no-reduce': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#no-reduce'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/no-array-reduce' ]
            }
          },
          'no-unsafe-regex': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#no-unsafe-regex'
              },
              deprecated: true,
              replacedBy: []
            }
          },
          'prefer-dataset': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-dataset'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-dom-node-dataset' ]
            }
          },
          'prefer-event-key': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-event-key'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-keyboard-event-key' ]
            }
          },
          'prefer-exponentiation-operator': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-exponentiation-operator'
              },
              deprecated: true,
              replacedBy: [ 'prefer-exponentiation-operator' ]
            }
          },
          'prefer-flat-map': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-flat-map'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-array-flat-map' ]
            }
          },
          'prefer-node-append': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-node-append'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-dom-node-append' ]
            }
          },
          'prefer-node-remove': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-node-remove'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-dom-node-remove' ]
            }
          },
          'prefer-object-has-own': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-object-has-own'
              },
              deprecated: true,
              replacedBy: [ 'prefer-object-has-own' ]
            }
          },
          'prefer-replace-all': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-replace-all'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-string-replace-all' ]
            }
          },
          'prefer-starts-ends-with': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-starts-ends-with'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-string-starts-ends-with' ]
            }
          },
          'prefer-text-content': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-text-content'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-dom-node-text-content' ]
            }
          },
          'prefer-trim-start-end': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#prefer-trim-start-end'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/prefer-string-trim-start-end' ]
            }
          },
          'regex-shorthand': {
            create: [Function: create],
            meta: {
              docs: {
                url: 'https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v54.0.0/docs/deprecated-rules.md#regex-shorthand'
              },
              deprecated: true,
              replacedBy: [ 'unicorn/better-regex' ]
            }
          }
        }
      }
    },
    rules: {
      'no-negated-condition': 'off',
      'no-nested-ternary': 'off',
      'unicorn/better-regex': 'error',
      'unicorn/catch-error-name': 'error',
      'unicorn/consistent-destructuring': 'off',
      'unicorn/consistent-empty-array-spread': 'error',
      'unicorn/consistent-function-scoping': 'error',
      'unicorn/custom-error-definition': 'off',
      'unicorn/empty-brace-spaces': 'error',
      'unicorn/error-message': 'error',
      'unicorn/escape-case': 'error',
      'unicorn/expiring-todo-comments': 'error',
      'unicorn/explicit-length-check': 'error',
      'unicorn/filename-case': 'error',
      'unicorn/import-style': 'error',
      'unicorn/new-for-builtins': 'error',
      'unicorn/no-abusive-eslint-disable': 'error',
      'unicorn/no-anonymous-default-export': 'error',
      'unicorn/no-array-callback-reference': 'error',
      'unicorn/no-array-for-each': 'error',
      'unicorn/no-array-method-this-argument': 'error',
      'unicorn/no-array-push-push': 'error',
      'unicorn/no-array-reduce': 'error',
      'unicorn/no-await-expression-member': 'error',
      'unicorn/no-await-in-promise-methods': 'error',
      'unicorn/no-console-spaces': 'error',
      'unicorn/no-document-cookie': 'error',
      'unicorn/no-empty-file': 'error',
      'unicorn/no-for-loop': 'error',
      'unicorn/no-hex-escape': 'error',
      'unicorn/no-instanceof-array': 'error',
      'unicorn/no-invalid-fetch-options': 'error',
      'unicorn/no-invalid-remove-event-listener': 'error',
      'unicorn/no-keyword-prefix': 'off',
      'unicorn/no-lonely-if': 'error',
      'unicorn/no-magic-array-flat-depth': 'error',
      'unicorn/no-negated-condition': 'error',
      'unicorn/no-negation-in-equality-check': 'error',
      'unicorn/no-nested-ternary': 'error',
      'unicorn/no-new-array': 'error',
      'unicorn/no-new-buffer': 'error',
      'unicorn/no-null': 'error',
      'unicorn/no-object-as-default-parameter': 'error',
      'unicorn/no-process-exit': 'error',
      'unicorn/no-single-promise-in-promise-methods': 'error',
      'unicorn/no-static-only-class': 'error',
      'unicorn/no-thenable': 'error',
      'unicorn/no-this-assignment': 'error',
      'unicorn/no-typeof-undefined': 'error',
      'unicorn/no-unnecessary-await': 'error',
      'unicorn/no-unnecessary-polyfills': 'error',
      'unicorn/no-unreadable-array-destructuring': 'error',
      'unicorn/no-unreadable-iife': 'error',
      'unicorn/no-unused-properties': 'off',
      'unicorn/no-useless-fallback-in-spread': 'error',
      'unicorn/no-useless-length-check': 'error',
      'unicorn/no-useless-promise-resolve-reject': 'error',
      'unicorn/no-useless-spread': 'error',
      'unicorn/no-useless-switch-case': 'error',
      'unicorn/no-useless-undefined': 'error',
      'unicorn/no-zero-fractions': 'error',
      'unicorn/number-literal-case': 'error',
      'unicorn/numeric-separators-style': 'error',
      'unicorn/prefer-add-event-listener': 'error',
      'unicorn/prefer-array-find': 'error',
      'unicorn/prefer-array-flat-map': 'error',
      'unicorn/prefer-array-flat': 'error',
      'unicorn/prefer-array-index-of': 'error',
      'unicorn/prefer-array-some': 'error',
      'unicorn/prefer-at': 'error',
      'unicorn/prefer-blob-reading-methods': 'error',
      'unicorn/prefer-code-point': 'error',
      'unicorn/prefer-date-now': 'error',
      'unicorn/prefer-default-parameters': 'error',
      'unicorn/prefer-dom-node-append': 'error',
      'unicorn/prefer-dom-node-dataset': 'error',
      'unicorn/prefer-dom-node-remove': 'error',
      'unicorn/prefer-dom-node-text-content': 'error',
      'unicorn/prefer-event-target': 'error',
      'unicorn/prefer-export-from': 'error',
      'unicorn/prefer-includes': 'error',
      'unicorn/prefer-json-parse-buffer': 'off',
      'unicorn/prefer-keyboard-event-key': 'error',
      'unicorn/prefer-logical-operator-over-ternary': 'error',
      'unicorn/prefer-math-trunc': 'error',
      'unicorn/prefer-modern-dom-apis': 'error',
      'unicorn/prefer-modern-math-apis': 'error',
      'unicorn/prefer-module': 'error',
      'unicorn/prefer-native-coercion-functions': 'error',
      'unicorn/prefer-negative-index': 'error',
      'unicorn/prefer-node-protocol': 'error',
      'unicorn/prefer-number-properties': 'error',
      'unicorn/prefer-object-from-entries': 'error',
      'unicorn/prefer-optional-catch-binding': 'error',
      'unicorn/prefer-prototype-methods': 'error',
      'unicorn/prefer-query-selector': 'error',
      'unicorn/prefer-reflect-apply': 'error',
      'unicorn/prefer-regexp-test': 'error',
      'unicorn/prefer-set-has': 'error',
      'unicorn/prefer-set-size': 'error',
      'unicorn/prefer-spread': 'error',
      'unicorn/prefer-string-raw': 'error',
      'unicorn/prefer-string-replace-all': 'error',
      'unicorn/prefer-string-slice': 'error',
      'unicorn/prefer-string-starts-ends-with': 'error',
      'unicorn/prefer-string-trim-start-end': 'error',
      'unicorn/prefer-structured-clone': 'error',
      'unicorn/prefer-switch': 'error',
      'unicorn/prefer-ternary': 'error',
      'unicorn/prefer-top-level-await': 'error',
      'unicorn/prefer-type-error': 'error',
      'unicorn/prevent-abbreviations': 'error',
      'unicorn/relative-url-style': 'error',
      'unicorn/require-array-join-separator': 'error',
      'unicorn/require-number-to-fixed-digits-argument': 'error',
      'unicorn/require-post-message-target-origin': 'off',
      'unicorn/string-content': 'off',
      'unicorn/switch-case-braces': 'error',
      'unicorn/template-indent': 'error',
      'unicorn/text-encoding-identifier-case': 'error',
      'unicorn/throw-new-error': 'error'
    },
    files: [ '**/*.js', '**/*.cjs', '**/*.mjs', '**/*.ts' ]
  },
  {
    rules: {
      'perfectionist/sort-imports': [
        'warn',
        {
          type: 'natural',
          groups: [
            [
              'internal-type',
              'parent-type',
              'sibling-type',
              'index-type'
            ],
            [ 'node-type' ],
            [ 'type', 'builtin-type' ],
            [ 'internal', 'parent', 'sibling', 'index' ],
            [ 'node' ],
            [ 'external', 'builtin' ],
            [ 'style' ],
            [ 'side-effect' ],
            [ 'object' ],
            [ 'unknown' ]
          ],
          'custom-groups': {
            value: { node: 'node:*' },
            type: { 'node-type': 'node:*' }
          },
          'internal-pattern': [ '@/**', '#/**', '~/**' ],
          'newlines-between': 'never'
        }
      ],
      'perfectionist/sort-named-imports': [ 'warn', { type: 'natural', order: 'asc' } ],
      'perfectionist/sort-named-exports': [ 'warn', { type: 'natural', order: 'asc' } ]
    },
    files: [ '**/*.js', '**/*.cjs', '**/*.mjs', '**/*.ts' ]
  },
  {
    name: 'typescript-eslint/base',
    languageOptions: {
      parser: {
        meta: { name: 'typescript-eslint/parser', version: '8.0.0-alpha.30' },
        parseForESLint: [Function: parseForESLint]
      },
      sourceType: 'module'
    },
    plugins: {
      '@typescript-eslint': {
        configs: {
          all: {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/adjacent-overload-signatures': 'error',
              '@typescript-eslint/array-type': 'error',
              '@typescript-eslint/await-thenable': 'error',
              '@typescript-eslint/ban-ts-comment': 'error',
              '@typescript-eslint/ban-tslint-comment': 'error',
              '@typescript-eslint/ban-types': 'error',
              '@typescript-eslint/class-literal-property-style': 'error',
              'class-methods-use-this': 'off',
              '@typescript-eslint/class-methods-use-this': 'error',
              '@typescript-eslint/consistent-generic-constructors': 'error',
              '@typescript-eslint/consistent-indexed-object-style': 'error',
              'consistent-return': 'off',
              '@typescript-eslint/consistent-return': 'error',
              '@typescript-eslint/consistent-type-assertions': 'error',
              '@typescript-eslint/consistent-type-definitions': 'error',
              '@typescript-eslint/consistent-type-exports': 'error',
              '@typescript-eslint/consistent-type-imports': 'error',
              'default-param-last': 'off',
              '@typescript-eslint/default-param-last': 'error',
              'dot-notation': 'off',
              '@typescript-eslint/dot-notation': 'error',
              '@typescript-eslint/explicit-function-return-type': 'error',
              '@typescript-eslint/explicit-member-accessibility': 'error',
              '@typescript-eslint/explicit-module-boundary-types': 'error',
              'init-declarations': 'off',
              '@typescript-eslint/init-declarations': 'error',
              'max-params': 'off',
              '@typescript-eslint/max-params': 'error',
              '@typescript-eslint/member-ordering': 'error',
              '@typescript-eslint/method-signature-style': 'error',
              '@typescript-eslint/naming-convention': 'error',
              'no-array-constructor': 'off',
              '@typescript-eslint/no-array-constructor': 'error',
              '@typescript-eslint/no-array-delete': 'error',
              '@typescript-eslint/no-base-to-string': 'error',
              '@typescript-eslint/no-confusing-non-null-assertion': 'error',
              '@typescript-eslint/no-confusing-void-expression': 'error',
              'no-dupe-class-members': 'off',
              '@typescript-eslint/no-dupe-class-members': 'error',
              '@typescript-eslint/no-duplicate-enum-values': 'error',
              '@typescript-eslint/no-duplicate-type-constituents': 'error',
              '@typescript-eslint/no-dynamic-delete': 'error',
              'no-empty-function': 'off',
              '@typescript-eslint/no-empty-function': 'error',
              '@typescript-eslint/no-empty-object-type': 'error',
              '@typescript-eslint/no-explicit-any': 'error',
              '@typescript-eslint/no-extra-non-null-assertion': 'error',
              '@typescript-eslint/no-extraneous-class': 'error',
              '@typescript-eslint/no-floating-promises': 'error',
              '@typescript-eslint/no-for-in-array': 'error',
              'no-implied-eval': 'off',
              '@typescript-eslint/no-implied-eval': 'error',
              '@typescript-eslint/no-import-type-side-effects': 'error',
              '@typescript-eslint/no-inferrable-types': 'error',
              'no-invalid-this': 'off',
              '@typescript-eslint/no-invalid-this': 'error',
              '@typescript-eslint/no-invalid-void-type': 'error',
              'no-loop-func': 'off',
              '@typescript-eslint/no-loop-func': 'error',
              'no-magic-numbers': 'off',
              '@typescript-eslint/no-magic-numbers': 'error',
              '@typescript-eslint/no-meaningless-void-operator': 'error',
              '@typescript-eslint/no-misused-new': 'error',
              '@typescript-eslint/no-misused-promises': 'error',
              '@typescript-eslint/no-mixed-enums': 'error',
              '@typescript-eslint/no-namespace': 'error',
              '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
              '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
              '@typescript-eslint/no-non-null-assertion': 'error',
              'no-redeclare': 'off',
              '@typescript-eslint/no-redeclare': 'error',
              '@typescript-eslint/no-redundant-type-constituents': 'error',
              '@typescript-eslint/no-require-imports': 'error',
              'no-restricted-imports': 'off',
              '@typescript-eslint/no-restricted-imports': 'error',
              'no-shadow': 'off',
              '@typescript-eslint/no-shadow': 'error',
              '@typescript-eslint/no-this-alias': 'error',
              '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
              '@typescript-eslint/no-unnecessary-condition': 'error',
              '@typescript-eslint/no-unnecessary-qualifier': 'error',
              '@typescript-eslint/no-unnecessary-template-expression': 'error',
              '@typescript-eslint/no-unnecessary-type-arguments': 'error',
              '@typescript-eslint/no-unnecessary-type-assertion': 'error',
              '@typescript-eslint/no-unnecessary-type-constraint': 'error',
              '@typescript-eslint/no-unsafe-argument': 'error',
              '@typescript-eslint/no-unsafe-assignment': 'error',
              '@typescript-eslint/no-unsafe-call': 'error',
              '@typescript-eslint/no-unsafe-declaration-merging': 'error',
              '@typescript-eslint/no-unsafe-enum-comparison': 'error',
              '@typescript-eslint/no-unsafe-member-access': 'error',
              '@typescript-eslint/no-unsafe-return': 'error',
              '@typescript-eslint/no-unsafe-unary-minus': 'error',
              'no-unused-expressions': 'off',
              '@typescript-eslint/no-unused-expressions': 'error',
              'no-unused-vars': 'off',
              '@typescript-eslint/no-unused-vars': 'error',
              'no-use-before-define': 'off',
              '@typescript-eslint/no-use-before-define': 'error',
              'no-useless-constructor': 'off',
              '@typescript-eslint/no-useless-constructor': 'error',
              '@typescript-eslint/no-useless-empty-export': 'error',
              '@typescript-eslint/non-nullable-type-assertion-style': 'error',
              'no-throw-literal': 'off',
              '@typescript-eslint/only-throw-error': 'error',
              '@typescript-eslint/parameter-properties': 'error',
              '@typescript-eslint/prefer-as-const': 'error',
              'prefer-destructuring': 'off',
              '@typescript-eslint/prefer-destructuring': 'error',
              '@typescript-eslint/prefer-enum-initializers': 'error',
              '@typescript-eslint/prefer-find': 'error',
              '@typescript-eslint/prefer-for-of': 'error',
              '@typescript-eslint/prefer-function-type': 'error',
              '@typescript-eslint/prefer-includes': 'error',
              '@typescript-eslint/prefer-literal-enum-member': 'error',
              '@typescript-eslint/prefer-namespace-keyword': 'error',
              '@typescript-eslint/prefer-nullish-coalescing': 'error',
              '@typescript-eslint/prefer-optional-chain': 'error',
              'prefer-promise-reject-errors': 'off',
              '@typescript-eslint/prefer-promise-reject-errors': 'error',
              '@typescript-eslint/prefer-readonly': 'error',
              '@typescript-eslint/prefer-readonly-parameter-types': 'error',
              '@typescript-eslint/prefer-reduce-type-parameter': 'error',
              '@typescript-eslint/prefer-regexp-exec': 'error',
              '@typescript-eslint/prefer-return-this-type': 'error',
              '@typescript-eslint/prefer-string-starts-ends-with': 'error',
              '@typescript-eslint/promise-function-async': 'error',
              '@typescript-eslint/require-array-sort-compare': 'error',
              'require-await': 'off',
              '@typescript-eslint/require-await': 'error',
              '@typescript-eslint/restrict-plus-operands': 'error',
              '@typescript-eslint/restrict-template-expressions': 'error',
              'no-return-await': 'off',
              '@typescript-eslint/return-await': 'error',
              '@typescript-eslint/strict-boolean-expressions': 'error',
              '@typescript-eslint/switch-exhaustiveness-check': 'error',
              '@typescript-eslint/triple-slash-reference': 'error',
              '@typescript-eslint/typedef': 'error',
              '@typescript-eslint/unbound-method': 'error',
              '@typescript-eslint/unified-signatures': 'error',
              '@typescript-eslint/use-unknown-in-catch-callback-variable': 'error'
            }
          },
          base: {
            parser: '@typescript-eslint/parser',
            parserOptions: { sourceType: 'module' },
            plugins: [ '@typescript-eslint' ]
          },
          'disable-type-checked': {
            parserOptions: { project: false, program: null },
            rules: {
              '@typescript-eslint/await-thenable': 'off',
              '@typescript-eslint/consistent-return': 'off',
              '@typescript-eslint/consistent-type-exports': 'off',
              '@typescript-eslint/dot-notation': 'off',
              '@typescript-eslint/naming-convention': 'off',
              '@typescript-eslint/no-array-delete': 'off',
              '@typescript-eslint/no-base-to-string': 'off',
              '@typescript-eslint/no-confusing-void-expression': 'off',
              '@typescript-eslint/no-duplicate-type-constituents': 'off',
              '@typescript-eslint/no-floating-promises': 'off',
              '@typescript-eslint/no-for-in-array': 'off',
              '@typescript-eslint/no-implied-eval': 'off',
              '@typescript-eslint/no-meaningless-void-operator': 'off',
              '@typescript-eslint/no-misused-promises': 'off',
              '@typescript-eslint/no-mixed-enums': 'off',
              '@typescript-eslint/no-redundant-type-constituents': 'off',
              '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'off',
              '@typescript-eslint/no-unnecessary-condition': 'off',
              '@typescript-eslint/no-unnecessary-qualifier': 'off',
              '@typescript-eslint/no-unnecessary-template-expression': 'off',
              '@typescript-eslint/no-unnecessary-type-arguments': 'off',
              '@typescript-eslint/no-unnecessary-type-assertion': 'off',
              '@typescript-eslint/no-unsafe-argument': 'off',
              '@typescript-eslint/no-unsafe-assignment': 'off',
              '@typescript-eslint/no-unsafe-call': 'off',
              '@typescript-eslint/no-unsafe-enum-comparison': 'off',
              '@typescript-eslint/no-unsafe-member-access': 'off',
              '@typescript-eslint/no-unsafe-return': 'off',
              '@typescript-eslint/no-unsafe-unary-minus': 'off',
              '@typescript-eslint/non-nullable-type-assertion-style': 'off',
              '@typescript-eslint/only-throw-error': 'off',
              '@typescript-eslint/prefer-destructuring': 'off',
              '@typescript-eslint/prefer-find': 'off',
              '@typescript-eslint/prefer-includes': 'off',
              '@typescript-eslint/prefer-nullish-coalescing': 'off',
              '@typescript-eslint/prefer-optional-chain': 'off',
              '@typescript-eslint/prefer-promise-reject-errors': 'off',
              '@typescript-eslint/prefer-readonly': 'off',
              '@typescript-eslint/prefer-readonly-parameter-types': 'off',
              '@typescript-eslint/prefer-reduce-type-parameter': 'off',
              '@typescript-eslint/prefer-regexp-exec': 'off',
              '@typescript-eslint/prefer-return-this-type': 'off',
              '@typescript-eslint/prefer-string-starts-ends-with': 'off',
              '@typescript-eslint/promise-function-async': 'off',
              '@typescript-eslint/require-array-sort-compare': 'off',
              '@typescript-eslint/require-await': 'off',
              '@typescript-eslint/restrict-plus-operands': 'off',
              '@typescript-eslint/restrict-template-expressions': 'off',
              '@typescript-eslint/return-await': 'off',
              '@typescript-eslint/strict-boolean-expressions': 'off',
              '@typescript-eslint/switch-exhaustiveness-check': 'off',
              '@typescript-eslint/unbound-method': 'off',
              '@typescript-eslint/use-unknown-in-catch-callback-variable': 'off'
            }
          },
          'eslint-recommended': {
            overrides: [
              {
                files: [ '*.ts', '*.tsx', '*.mts', '*.cts' ],
                rules: {
                  'constructor-super': 'off',
                  'getter-return': 'off',
                  'no-const-assign': 'off',
                  'no-dupe-args': 'off',
                  'no-dupe-class-members': 'off',
                  'no-dupe-keys': 'off',
                  'no-func-assign': 'off',
                  'no-import-assign': 'off',
                  'no-new-symbol': 'off',
                  'no-new-native-nonconstructor': 'off',
                  'no-obj-calls': 'off',
                  'no-redeclare': 'off',
                  'no-setter-return': 'off',
                  'no-this-before-super': 'off',
                  'no-undef': 'off',
                  'no-unreachable': 'off',
                  'no-unsafe-negation': 'off',
                  'no-var': 'error',
                  'prefer-const': 'error',
                  'prefer-rest-params': 'error',
                  'prefer-spread': 'error'
                }
              }
            ]
          },
          recommended: {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/ban-ts-comment': 'error',
              '@typescript-eslint/ban-types': 'error',
              'no-array-constructor': 'off',
              '@typescript-eslint/no-array-constructor': 'error',
              '@typescript-eslint/no-duplicate-enum-values': 'error',
              '@typescript-eslint/no-empty-object-type': 'error',
              '@typescript-eslint/no-explicit-any': 'error',
              '@typescript-eslint/no-extra-non-null-assertion': 'error',
              '@typescript-eslint/no-misused-new': 'error',
              '@typescript-eslint/no-namespace': 'error',
              '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
              '@typescript-eslint/no-require-imports': 'error',
              '@typescript-eslint/no-this-alias': 'error',
              '@typescript-eslint/no-unnecessary-type-constraint': 'error',
              '@typescript-eslint/no-unsafe-declaration-merging': 'error',
              'no-unused-expressions': 'off',
              '@typescript-eslint/no-unused-expressions': 'error',
              'no-unused-vars': 'off',
              '@typescript-eslint/no-unused-vars': 'error',
              '@typescript-eslint/prefer-as-const': 'error',
              '@typescript-eslint/prefer-namespace-keyword': 'error',
              '@typescript-eslint/triple-slash-reference': 'error'
            }
          },
          'recommended-requiring-type-checking': {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/await-thenable': 'error',
              '@typescript-eslint/ban-ts-comment': 'error',
              '@typescript-eslint/ban-types': 'error',
              'no-array-constructor': 'off',
              '@typescript-eslint/no-array-constructor': 'error',
              '@typescript-eslint/no-array-delete': 'error',
              '@typescript-eslint/no-base-to-string': 'error',
              '@typescript-eslint/no-duplicate-enum-values': 'error',
              '@typescript-eslint/no-duplicate-type-constituents': 'error',
              '@typescript-eslint/no-empty-object-type': 'error',
              '@typescript-eslint/no-explicit-any': 'error',
              '@typescript-eslint/no-extra-non-null-assertion': 'error',
              '@typescript-eslint/no-floating-promises': 'error',
              '@typescript-eslint/no-for-in-array': 'error',
              'no-implied-eval': 'off',
              '@typescript-eslint/no-implied-eval': 'error',
              '@typescript-eslint/no-misused-new': 'error',
              '@typescript-eslint/no-misused-promises': 'error',
              '@typescript-eslint/no-namespace': 'error',
              '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
              '@typescript-eslint/no-redundant-type-constituents': 'error',
              '@typescript-eslint/no-require-imports': 'error',
              '@typescript-eslint/no-this-alias': 'error',
              '@typescript-eslint/no-unnecessary-type-assertion': 'error',
              '@typescript-eslint/no-unnecessary-type-constraint': 'error',
              '@typescript-eslint/no-unsafe-argument': 'error',
              '@typescript-eslint/no-unsafe-assignment': 'error',
              '@typescript-eslint/no-unsafe-call': 'error',
              '@typescript-eslint/no-unsafe-declaration-merging': 'error',
              '@typescript-eslint/no-unsafe-enum-comparison': 'error',
              '@typescript-eslint/no-unsafe-member-access': 'error',
              '@typescript-eslint/no-unsafe-return': 'error',
              '@typescript-eslint/no-unsafe-unary-minus': 'error',
              'no-unused-expressions': 'off',
              '@typescript-eslint/no-unused-expressions': 'error',
              'no-unused-vars': 'off',
              '@typescript-eslint/no-unused-vars': 'error',
              'no-throw-literal': 'off',
              '@typescript-eslint/only-throw-error': 'error',
              '@typescript-eslint/prefer-as-const': 'error',
              '@typescript-eslint/prefer-namespace-keyword': 'error',
              'prefer-promise-reject-errors': 'off',
              '@typescript-eslint/prefer-promise-reject-errors': 'error',
              'require-await': 'off',
              '@typescript-eslint/require-await': 'error',
              '@typescript-eslint/restrict-plus-operands': 'error',
              '@typescript-eslint/restrict-template-expressions': 'error',
              '@typescript-eslint/triple-slash-reference': 'error',
              '@typescript-eslint/unbound-method': 'error'
            }
          },
          'recommended-type-checked': {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/await-thenable': 'error',
              '@typescript-eslint/ban-ts-comment': 'error',
              '@typescript-eslint/ban-types': 'error',
              'no-array-constructor': 'off',
              '@typescript-eslint/no-array-constructor': 'error',
              '@typescript-eslint/no-array-delete': 'error',
              '@typescript-eslint/no-base-to-string': 'error',
              '@typescript-eslint/no-duplicate-enum-values': 'error',
              '@typescript-eslint/no-duplicate-type-constituents': 'error',
              '@typescript-eslint/no-empty-object-type': 'error',
              '@typescript-eslint/no-explicit-any': 'error',
              '@typescript-eslint/no-extra-non-null-assertion': 'error',
              '@typescript-eslint/no-floating-promises': 'error',
              '@typescript-eslint/no-for-in-array': 'error',
              'no-implied-eval': 'off',
              '@typescript-eslint/no-implied-eval': 'error',
              '@typescript-eslint/no-misused-new': 'error',
              '@typescript-eslint/no-misused-promises': 'error',
              '@typescript-eslint/no-namespace': 'error',
              '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
              '@typescript-eslint/no-redundant-type-constituents': 'error',
              '@typescript-eslint/no-require-imports': 'error',
              '@typescript-eslint/no-this-alias': 'error',
              '@typescript-eslint/no-unnecessary-type-assertion': 'error',
              '@typescript-eslint/no-unnecessary-type-constraint': 'error',
              '@typescript-eslint/no-unsafe-argument': 'error',
              '@typescript-eslint/no-unsafe-assignment': 'error',
              '@typescript-eslint/no-unsafe-call': 'error',
              '@typescript-eslint/no-unsafe-declaration-merging': 'error',
              '@typescript-eslint/no-unsafe-enum-comparison': 'error',
              '@typescript-eslint/no-unsafe-member-access': 'error',
              '@typescript-eslint/no-unsafe-return': 'error',
              '@typescript-eslint/no-unsafe-unary-minus': 'error',
              'no-unused-expressions': 'off',
              '@typescript-eslint/no-unused-expressions': 'error',
              'no-unused-vars': 'off',
              '@typescript-eslint/no-unused-vars': 'error',
              'no-throw-literal': 'off',
              '@typescript-eslint/only-throw-error': 'error',
              '@typescript-eslint/prefer-as-const': 'error',
              '@typescript-eslint/prefer-namespace-keyword': 'error',
              'prefer-promise-reject-errors': 'off',
              '@typescript-eslint/prefer-promise-reject-errors': 'error',
              'require-await': 'off',
              '@typescript-eslint/require-await': 'error',
              '@typescript-eslint/restrict-plus-operands': 'error',
              '@typescript-eslint/restrict-template-expressions': 'error',
              '@typescript-eslint/triple-slash-reference': 'error',
              '@typescript-eslint/unbound-method': 'error'
            }
          },
          'recommended-type-checked-only': {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/await-thenable': 'error',
              '@typescript-eslint/no-array-delete': 'error',
              '@typescript-eslint/no-base-to-string': 'error',
              '@typescript-eslint/no-duplicate-type-constituents': 'error',
              '@typescript-eslint/no-floating-promises': 'error',
              '@typescript-eslint/no-for-in-array': 'error',
              'no-implied-eval': 'off',
              '@typescript-eslint/no-implied-eval': 'error',
              '@typescript-eslint/no-misused-promises': 'error',
              '@typescript-eslint/no-redundant-type-constituents': 'error',
              '@typescript-eslint/no-unnecessary-type-assertion': 'error',
              '@typescript-eslint/no-unsafe-argument': 'error',
              '@typescript-eslint/no-unsafe-assignment': 'error',
              '@typescript-eslint/no-unsafe-call': 'error',
              '@typescript-eslint/no-unsafe-enum-comparison': 'error',
              '@typescript-eslint/no-unsafe-member-access': 'error',
              '@typescript-eslint/no-unsafe-return': 'error',
              '@typescript-eslint/no-unsafe-unary-minus': 'error',
              'no-throw-literal': 'off',
              '@typescript-eslint/only-throw-error': 'error',
              'prefer-promise-reject-errors': 'off',
              '@typescript-eslint/prefer-promise-reject-errors': 'error',
              'require-await': 'off',
              '@typescript-eslint/require-await': 'error',
              '@typescript-eslint/restrict-plus-operands': 'error',
              '@typescript-eslint/restrict-template-expressions': 'error',
              '@typescript-eslint/unbound-method': 'error'
            }
          },
          strict: {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/ban-ts-comment': [ 'error', { minimumDescriptionLength: 10 } ],
              '@typescript-eslint/ban-types': 'error',
              'no-array-constructor': 'off',
              '@typescript-eslint/no-array-constructor': 'error',
              '@typescript-eslint/no-duplicate-enum-values': 'error',
              '@typescript-eslint/no-dynamic-delete': 'error',
              '@typescript-eslint/no-empty-object-type': 'error',
              '@typescript-eslint/no-explicit-any': 'error',
              '@typescript-eslint/no-extra-non-null-assertion': 'error',
              '@typescript-eslint/no-extraneous-class': 'error',
              '@typescript-eslint/no-invalid-void-type': 'error',
              '@typescript-eslint/no-misused-new': 'error',
              '@typescript-eslint/no-namespace': 'error',
              '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
              '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
              '@typescript-eslint/no-non-null-assertion': 'error',
              '@typescript-eslint/no-require-imports': 'error',
              '@typescript-eslint/no-this-alias': 'error',
              '@typescript-eslint/no-unnecessary-type-constraint': 'error',
              '@typescript-eslint/no-unsafe-declaration-merging': 'error',
              'no-unused-expressions': 'off',
              '@typescript-eslint/no-unused-expressions': 'error',
              'no-unused-vars': 'off',
              '@typescript-eslint/no-unused-vars': 'error',
              'no-useless-constructor': 'off',
              '@typescript-eslint/no-useless-constructor': 'error',
              '@typescript-eslint/prefer-as-const': 'error',
              '@typescript-eslint/prefer-literal-enum-member': 'error',
              '@typescript-eslint/prefer-namespace-keyword': 'error',
              '@typescript-eslint/triple-slash-reference': 'error',
              '@typescript-eslint/unified-signatures': 'error'
            }
          },
          'strict-type-checked': {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/await-thenable': 'error',
              '@typescript-eslint/ban-ts-comment': [ 'error', { minimumDescriptionLength: 10 } ],
              '@typescript-eslint/ban-types': 'error',
              'no-array-constructor': 'off',
              '@typescript-eslint/no-array-constructor': 'error',
              '@typescript-eslint/no-array-delete': 'error',
              '@typescript-eslint/no-base-to-string': 'error',
              '@typescript-eslint/no-confusing-void-expression': 'error',
              '@typescript-eslint/no-duplicate-enum-values': 'error',
              '@typescript-eslint/no-duplicate-type-constituents': 'error',
              '@typescript-eslint/no-dynamic-delete': 'error',
              '@typescript-eslint/no-empty-object-type': 'error',
              '@typescript-eslint/no-explicit-any': 'error',
              '@typescript-eslint/no-extra-non-null-assertion': 'error',
              '@typescript-eslint/no-extraneous-class': 'error',
              '@typescript-eslint/no-floating-promises': 'error',
              '@typescript-eslint/no-for-in-array': 'error',
              'no-implied-eval': 'off',
              '@typescript-eslint/no-implied-eval': 'error',
              '@typescript-eslint/no-invalid-void-type': 'error',
              '@typescript-eslint/no-meaningless-void-operator': 'error',
              '@typescript-eslint/no-misused-new': 'error',
              '@typescript-eslint/no-misused-promises': 'error',
              '@typescript-eslint/no-mixed-enums': 'error',
              '@typescript-eslint/no-namespace': 'error',
              '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
              '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
              '@typescript-eslint/no-non-null-assertion': 'error',
              '@typescript-eslint/no-redundant-type-constituents': 'error',
              '@typescript-eslint/no-require-imports': 'error',
              '@typescript-eslint/no-this-alias': 'error',
              '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
              '@typescript-eslint/no-unnecessary-condition': 'error',
              '@typescript-eslint/no-unnecessary-template-expression': 'error',
              '@typescript-eslint/no-unnecessary-type-arguments': 'error',
              '@typescript-eslint/no-unnecessary-type-assertion': 'error',
              '@typescript-eslint/no-unnecessary-type-constraint': 'error',
              '@typescript-eslint/no-unsafe-argument': 'error',
              '@typescript-eslint/no-unsafe-assignment': 'error',
              '@typescript-eslint/no-unsafe-call': 'error',
              '@typescript-eslint/no-unsafe-declaration-merging': 'error',
              '@typescript-eslint/no-unsafe-enum-comparison': 'error',
              '@typescript-eslint/no-unsafe-member-access': 'error',
              '@typescript-eslint/no-unsafe-return': 'error',
              '@typescript-eslint/no-unsafe-unary-minus': 'error',
              'no-unused-expressions': 'off',
              '@typescript-eslint/no-unused-expressions': 'error',
              'no-unused-vars': 'off',
              '@typescript-eslint/no-unused-vars': 'error',
              'no-useless-constructor': 'off',
              '@typescript-eslint/no-useless-constructor': 'error',
              'no-throw-literal': 'off',
              '@typescript-eslint/only-throw-error': 'error',
              '@typescript-eslint/prefer-as-const': 'error',
              '@typescript-eslint/prefer-literal-enum-member': 'error',
              '@typescript-eslint/prefer-namespace-keyword': 'error',
              'prefer-promise-reject-errors': 'off',
              '@typescript-eslint/prefer-promise-reject-errors': 'error',
              '@typescript-eslint/prefer-reduce-type-parameter': 'error',
              '@typescript-eslint/prefer-return-this-type': 'error',
              'require-await': 'off',
              '@typescript-eslint/require-await': 'error',
              '@typescript-eslint/restrict-plus-operands': [
                'error',
                {
                  allowAny: false,
                  allowBoolean: false,
                  allowNullish: false,
                  allowNumberAndString: false,
                  allowRegExp: false
                }
              ],
              '@typescript-eslint/restrict-template-expressions': [
                'error',
                {
                  allowAny: false,
                  allowBoolean: false,
                  allowNullish: false,
                  allowNumber: false,
                  allowRegExp: false,
                  allowNever: false
                }
              ],
              '@typescript-eslint/triple-slash-reference': 'error',
              '@typescript-eslint/unbound-method': 'error',
              '@typescript-eslint/unified-signatures': 'error',
              '@typescript-eslint/use-unknown-in-catch-callback-variable': 'error'
            }
          },
          'strict-type-checked-only': {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/await-thenable': 'error',
              '@typescript-eslint/no-array-delete': 'error',
              '@typescript-eslint/no-base-to-string': 'error',
              '@typescript-eslint/no-confusing-void-expression': 'error',
              '@typescript-eslint/no-duplicate-type-constituents': 'error',
              '@typescript-eslint/no-floating-promises': 'error',
              '@typescript-eslint/no-for-in-array': 'error',
              'no-implied-eval': 'off',
              '@typescript-eslint/no-implied-eval': 'error',
              '@typescript-eslint/no-meaningless-void-operator': 'error',
              '@typescript-eslint/no-misused-promises': 'error',
              '@typescript-eslint/no-mixed-enums': 'error',
              '@typescript-eslint/no-redundant-type-constituents': 'error',
              '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
              '@typescript-eslint/no-unnecessary-condition': 'error',
              '@typescript-eslint/no-unnecessary-template-expression': 'error',
              '@typescript-eslint/no-unnecessary-type-arguments': 'error',
              '@typescript-eslint/no-unnecessary-type-assertion': 'error',
              '@typescript-eslint/no-unsafe-argument': 'error',
              '@typescript-eslint/no-unsafe-assignment': 'error',
              '@typescript-eslint/no-unsafe-call': 'error',
              '@typescript-eslint/no-unsafe-enum-comparison': 'error',
              '@typescript-eslint/no-unsafe-member-access': 'error',
              '@typescript-eslint/no-unsafe-return': 'error',
              '@typescript-eslint/no-unsafe-unary-minus': 'error',
              'no-throw-literal': 'off',
              '@typescript-eslint/only-throw-error': 'error',
              'prefer-promise-reject-errors': 'off',
              '@typescript-eslint/prefer-promise-reject-errors': 'error',
              '@typescript-eslint/prefer-reduce-type-parameter': 'error',
              '@typescript-eslint/prefer-return-this-type': 'error',
              'require-await': 'off',
              '@typescript-eslint/require-await': 'error',
              '@typescript-eslint/restrict-plus-operands': [
                'error',
                {
                  allowAny: false,
                  allowBoolean: false,
                  allowNullish: false,
                  allowNumberAndString: false,
                  allowRegExp: false
                }
              ],
              '@typescript-eslint/restrict-template-expressions': [
                'error',
                {
                  allowAny: false,
                  allowBoolean: false,
                  allowNullish: false,
                  allowNumber: false,
                  allowRegExp: false,
                  allowNever: false
                }
              ],
              '@typescript-eslint/unbound-method': 'error',
              '@typescript-eslint/use-unknown-in-catch-callback-variable': 'error'
            }
          },
          stylistic: {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/adjacent-overload-signatures': 'error',
              '@typescript-eslint/array-type': 'error',
              '@typescript-eslint/ban-tslint-comment': 'error',
              '@typescript-eslint/class-literal-property-style': 'error',
              '@typescript-eslint/consistent-generic-constructors': 'error',
              '@typescript-eslint/consistent-indexed-object-style': 'error',
              '@typescript-eslint/consistent-type-assertions': 'error',
              '@typescript-eslint/consistent-type-definitions': 'error',
              '@typescript-eslint/no-confusing-non-null-assertion': 'error',
              'no-empty-function': 'off',
              '@typescript-eslint/no-empty-function': 'error',
              '@typescript-eslint/no-inferrable-types': 'error',
              '@typescript-eslint/prefer-for-of': 'error',
              '@typescript-eslint/prefer-function-type': 'error'
            }
          },
          'stylistic-type-checked': {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              '@typescript-eslint/adjacent-overload-signatures': 'error',
              '@typescript-eslint/array-type': 'error',
              '@typescript-eslint/ban-tslint-comment': 'error',
              '@typescript-eslint/class-literal-property-style': 'error',
              '@typescript-eslint/consistent-generic-constructors': 'error',
              '@typescript-eslint/consistent-indexed-object-style': 'error',
              '@typescript-eslint/consistent-type-assertions': 'error',
              '@typescript-eslint/consistent-type-definitions': 'error',
              'dot-notation': 'off',
              '@typescript-eslint/dot-notation': 'error',
              '@typescript-eslint/no-confusing-non-null-assertion': 'error',
              'no-empty-function': 'off',
              '@typescript-eslint/no-empty-function': 'error',
              '@typescript-eslint/no-inferrable-types': 'error',
              '@typescript-eslint/non-nullable-type-assertion-style': 'error',
              '@typescript-eslint/prefer-find': 'error',
              '@typescript-eslint/prefer-for-of': 'error',
              '@typescript-eslint/prefer-function-type': 'error',
              '@typescript-eslint/prefer-includes': 'error',
              '@typescript-eslint/prefer-nullish-coalescing': 'error',
              '@typescript-eslint/prefer-optional-chain': 'error',
              '@typescript-eslint/prefer-regexp-exec': 'error',
              '@typescript-eslint/prefer-string-starts-ends-with': 'error'
            }
          },
          'stylistic-type-checked-only': {
            extends: [ './configs/base', './configs/eslint-recommended' ],
            rules: {
              'dot-notation': 'off',
              '@typescript-eslint/dot-notation': 'error',
              '@typescript-eslint/non-nullable-type-assertion-style': 'error',
              '@typescript-eslint/prefer-find': 'error',
              '@typescript-eslint/prefer-includes': 'error',
              '@typescript-eslint/prefer-nullish-coalescing': 'error',
              '@typescript-eslint/prefer-optional-chain': 'error',
              '@typescript-eslint/prefer-regexp-exec': 'error',
              '@typescript-eslint/prefer-string-starts-ends-with': 'error'
            }
          }
        },
        meta: {
          name: '@typescript-eslint/eslint-plugin',
          version: '8.0.0-alpha.30'
        },
        rules: {
          'adjacent-overload-signatures': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require that function overload signatures be consecutive',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/adjacent-overload-signatures'
              },
              schema: [],
              messages: {
                adjacentSignature: 'All {{name}} signatures should be adjacent.'
              }
            }
          },
          'array-type': {
            create: [Function: create],
            defaultOptions: [ { default: 'array' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require consistently using either `T[]` or `Array<T>` for arrays',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/array-type'
              },
              fixable: 'code',
              messages: {
                errorStringGeneric: "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
                errorStringArray: "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                errorStringArraySimple: "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                errorStringGenericSimple: "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead."
              },
              schema: [
                {
                  '$defs': {
                    arrayOption: {
                      type: 'string',
                      enum: [ 'array', 'generic', 'array-simple' ]
                    }
                  },
                  additionalProperties: false,
                  properties: {
                    default: {
                      '$ref': '#/items/0/$defs/arrayOption',
                      description: 'The array type expected for mutable cases.'
                    },
                    readonly: {
                      '$ref': '#/items/0/$defs/arrayOption',
                      description: 'The array type expected for readonly cases. If omitted, the value for `default` will be used.'
                    }
                  },
                  type: 'object'
                }
              ]
            }
          },
          'await-thenable': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow awaiting a value that is not a Thenable',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/await-thenable'
              },
              hasSuggestions: true,
              messages: {
                await: 'Unexpected `await` of a non-Promise (non-"Thenable") value.',
                removeAwait: 'Remove unnecessary `await`.'
              },
              schema: [],
              type: 'problem'
            }
          },
          'ban-ts-comment': {
            create: [Function: create],
            defaultOptions: [
              {
                'ts-expect-error': 'allow-with-description',
                'ts-ignore': true,
                'ts-nocheck': true,
                'ts-check': false,
                minimumDescriptionLength: 3
              }
            ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow `@ts-<directive>` comments or require descriptions after directives',
                recommended: {
                  recommended: true,
                  strict: [ { minimumDescriptionLength: 10 } ]
                },
                url: 'https://typescript-eslint.io/rules/ban-ts-comment'
              },
              messages: {
                tsDirectiveComment: 'Do not use "@ts-{{directive}}" because it alters compilation errors.',
                tsIgnoreInsteadOfExpectError: 'Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.',
                tsDirectiveCommentRequiresDescription: 'Include a description after the "@ts-{{directive}}" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.',
                tsDirectiveCommentDescriptionNotMatchPattern: 'The description for the "@ts-{{directive}}" directive must match the {{format}} format.',
                replaceTsIgnoreWithTsExpectError: 'Replace "@ts-ignore" with "@ts-expect-error".'
              },
              hasSuggestions: true,
              schema: [
                {
                  '$defs': {
                    directiveConfigSchema: {
                      oneOf: [
                        { type: 'boolean', default: true },
                        {
                          type: 'string',
                          enum: [ 'allow-with-description' ]
                        },
                        {
                          type: 'object',
                          additionalProperties: false,
                          properties: { descriptionFormat: { type: 'string' } }
                        }
                      ]
                    }
                  },
                  properties: {
                    'ts-expect-error': { '$ref': '#/items/0/$defs/directiveConfigSchema' },
                    'ts-ignore': { '$ref': '#/items/0/$defs/directiveConfigSchema' },
                    'ts-nocheck': { '$ref': '#/items/0/$defs/directiveConfigSchema' },
                    'ts-check': { '$ref': '#/items/0/$defs/directiveConfigSchema' },
                    minimumDescriptionLength: { type: 'number', default: 3 }
                  },
                  type: 'object',
                  additionalProperties: false
                }
              ]
            }
          },
          'ban-tslint-comment': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow `// tslint:<rule-flag>` comments',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/ban-tslint-comment'
              },
              messages: {
                commentDetected: 'tslint comment detected: "{{ text }}"'
              },
              schema: [],
              fixable: 'code'
            }
          },
          'ban-types': {
            create: [Function: create],
            defaultOptions: [ {} ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow certain types',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/ban-types'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                bannedTypeMessage: "Don't use `{{name}}` as a type.{{customMessage}}",
                bannedTypeReplacement: 'Replace `{{name}}` with `{{replacement}}`.'
              },
              schema: [
                {
                  '$defs': {
                    banConfig: {
                      oneOf: [
                        {
                          type: 'null',
                          description: 'Bans the type with the default message'
                        },
                        {
                          type: 'boolean',
                          enum: [ false ],
                          description: 'Un-bans the type (useful when paired with `extendDefaults`)'
                        },
                        {
                          type: 'boolean',
                          enum: [ true ],
                          description: 'Bans the type with the default message'
                        },
                        {
                          type: 'string',
                          description: 'Bans the type with a custom message'
                        },
                        {
                          type: 'object',
                          description: 'Bans a type',
                          properties: {
                            message: {
                              type: 'string',
                              description: 'Custom error message'
                            },
                            fixWith: {
                              type: 'string',
                              description: 'Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.'
                            },
                            suggest: {
                              type: 'array',
                              items: { type: 'string' },
                              description: 'Types to suggest replacing with.',
                              additionalItems: false
                            }
                          },
                          additionalProperties: false
                        }
                      ]
                    }
                  },
                  type: 'object',
                  properties: {
                    types: {
                      type: 'object',
                      additionalProperties: { '$ref': '#/items/0/$defs/banConfig' }
                    },
                    extendDefaults: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'class-literal-property-style': {
            create: [Function: create],
            defaultOptions: [ 'fields' ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Enforce that literals on classes are exposed in a consistent style',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/class-literal-property-style'
              },
              hasSuggestions: true,
              messages: {
                preferFieldStyle: 'Literals should be exposed using readonly fields.',
                preferFieldStyleSuggestion: 'Replace the literals with readonly fields.',
                preferGetterStyle: 'Literals should be exposed using getters.',
                preferGetterStyleSuggestion: 'Replace the literals with getters.'
              },
              schema: [ { type: 'string', enum: [ 'fields', 'getters' ] } ]
            }
          },
          'class-methods-use-this': {
            create: [Function: create],
            defaultOptions: [
              {
                enforceForClassFields: true,
                exceptMethods: [],
                ignoreClassesThatImplementAnInterface: false,
                ignoreOverrideMethods: false
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce that class methods utilize `this`',
                extendsBaseRule: true,
                requiresTypeChecking: false,
                url: 'https://typescript-eslint.io/rules/class-methods-use-this'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    exceptMethods: {
                      type: 'array',
                      description: 'Allows specified method names to be ignored with this rule',
                      items: { type: 'string' }
                    },
                    enforceForClassFields: {
                      type: 'boolean',
                      description: 'Enforces that functions used as instance field initializers utilize `this`',
                      default: true
                    },
                    ignoreOverrideMethods: {
                      type: 'boolean',
                      description: 'Ignore members marked with the `override` modifier'
                    },
                    ignoreClassesThatImplementAnInterface: {
                      oneOf: [
                        {
                          type: 'boolean',
                          description: 'Ignore all classes that implement an interface'
                        },
                        {
                          type: 'string',
                          enum: [ 'public-fields' ],
                          description: 'Ignore only the public fields of classes that implement an interface'
                        }
                      ],
                      description: 'Ignore classes that specifically implement some interface'
                    }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                missingThis: "Expected 'this' to be used by class {{name}}."
              }
            }
          },
          'consistent-generic-constructors': {
            create: [Function: create],
            defaultOptions: [ 'constructor' ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce specifying generic type arguments on type annotation or constructor name of a constructor call',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/consistent-generic-constructors'
              },
              messages: {
                preferTypeAnnotation: 'The generic type arguments should be specified as part of the type annotation.',
                preferConstructor: 'The generic type arguments should be specified as part of the constructor type arguments.'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'string',
                  enum: [ 'type-annotation', 'constructor' ]
                }
              ]
            }
          },
          'consistent-indexed-object-style': {
            create: [Function: create],
            defaultOptions: [ 'record' ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require or disallow the `Record` type',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/consistent-indexed-object-style'
              },
              messages: {
                preferRecord: 'A record is preferred over an index signature.',
                preferIndexSignature: 'An index signature is preferred over a record.'
              },
              fixable: 'code',
              schema: [
                {
                  type: 'string',
                  enum: [ 'record', 'index-signature' ]
                }
              ]
            }
          },
          'consistent-return': {
            create: [Function: create],
            defaultOptions: [ { treatUndefinedAsUnspecified: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require `return` statements to either always or never specify values',
                extendsBaseRule: true,
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/consistent-return'
              },
              hasSuggestions: undefined,
              schema: [
                {
                  type: 'object',
                  properties: {
                    treatUndefinedAsUnspecified: { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                missingReturn: 'Expected to return a value at the end of {{name}}.',
                missingReturnValue: '{{name}} expected a return value.',
                unexpectedReturnValue: '{{name}} expected no return value.'
              }
            }
          },
          'consistent-type-assertions': {
            create: [Function: create],
            defaultOptions: [
              {
                assertionStyle: 'as',
                objectLiteralTypeAssertions: 'allow'
              }
            ],
            meta: {
              type: 'suggestion',
              fixable: 'code',
              hasSuggestions: true,
              docs: {
                description: 'Enforce consistent usage of type assertions',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/consistent-type-assertions'
              },
              messages: {
                as: "Use 'as {{cast}}' instead of '<{{cast}}>'.",
                'angle-bracket': "Use '<{{cast}}>' instead of 'as {{cast}}'.",
                never: 'Do not use any type assertions.',
                unexpectedObjectTypeAssertion: 'Always prefer const x: T = { ... }.',
                replaceObjectTypeAssertionWithAnnotation: 'Use const x: {{cast}} = { ... } instead.',
                replaceObjectTypeAssertionWithSatisfies: 'Use const x = { ... } satisfies {{cast}} instead.'
              },
              schema: [
                {
                  oneOf: [
                    {
                      type: 'object',
                      properties: {
                        assertionStyle: { type: 'string', enum: [ 'never' ] }
                      },
                      additionalProperties: false,
                      required: [ 'assertionStyle' ]
                    },
                    {
                      type: 'object',
                      properties: {
                        assertionStyle: {
                          type: 'string',
                          enum: [ 'as', 'angle-bracket' ]
                        },
                        objectLiteralTypeAssertions: {
                          type: 'string',
                          enum: [ 'allow', 'allow-as-parameter', 'never' ]
                        }
                      },
                      additionalProperties: false,
                      required: [ 'assertionStyle' ]
                    }
                  ]
                }
              ]
            }
          },
          'consistent-type-definitions': {
            create: [Function: create],
            defaultOptions: [ 'interface' ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce type definitions to consistently use either `interface` or `type`',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/consistent-type-definitions'
              },
              messages: {
                interfaceOverType: 'Use an `interface` instead of a `type`.',
                typeOverInterface: 'Use a `type` instead of an `interface`.'
              },
              schema: [ { type: 'string', enum: [ 'interface', 'type' ] } ],
              fixable: 'code'
            }
          },
          'consistent-type-exports': {
            create: [Function: create],
            defaultOptions: [ { fixMixedExportsWithInlineTypeSpecifier: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce consistent usage of type exports',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/consistent-type-exports'
              },
              messages: {
                typeOverValue: 'All exports in the declaration are only used as types. Use `export type`.',
                singleExportIsType: 'Type export {{exportNames}} is not a value and should be exported using `export type`.',
                multipleExportsAreTypes: 'Type exports {{exportNames}} are not values and should be exported using `export type`.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    fixMixedExportsWithInlineTypeSpecifier: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ],
              fixable: 'code'
            }
          },
          'consistent-type-imports': {
            create: [Function: create],
            defaultOptions: [
              {
                prefer: 'type-imports',
                disallowTypeAnnotations: true,
                fixStyle: 'separate-type-imports'
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce consistent usage of type imports',
                url: 'https://typescript-eslint.io/rules/consistent-type-imports'
              },
              messages: {
                typeOverValue: 'All imports in the declaration are only used as types. Use `import type`.',
                someImportsAreOnlyTypes: 'Imports {{typeImports}} are only used as type.',
                avoidImportType: 'Use an `import` instead of an `import type`.',
                noImportTypeAnnotations: '`import()` type annotations are forbidden.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    disallowTypeAnnotations: { type: 'boolean' },
                    fixStyle: {
                      type: 'string',
                      enum: [
                        'separate-type-imports',
                        'inline-type-imports'
                      ]
                    },
                    prefer: {
                      type: 'string',
                      enum: [ 'type-imports', 'no-type-imports' ]
                    }
                  },
                  additionalProperties: false
                }
              ],
              fixable: 'code'
            }
          },
          'default-param-last': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce default parameters to be last',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/default-param-last'
              },
              schema: [],
              messages: { shouldBeLast: 'Default parameters should be last.' }
            }
          },
          'dot-notation': {
            create: [Function: create],
            defaultOptions: [
              {
                allowPrivateClassPropertyAccess: false,
                allowProtectedClassPropertyAccess: false,
                allowIndexSignaturePropertyAccess: false,
                allowKeywords: true,
                allowPattern: ''
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce dot notation whenever possible',
                recommended: 'stylistic',
                extendsBaseRule: true,
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/dot-notation'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowKeywords: { type: 'boolean', default: true },
                    allowPattern: { type: 'string', default: '' },
                    allowPrivateClassPropertyAccess: { type: 'boolean', default: false },
                    allowProtectedClassPropertyAccess: { type: 'boolean', default: false },
                    allowIndexSignaturePropertyAccess: { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              fixable: 'code',
              hasSuggestions: undefined,
              messages: {
                useDot: '[{{key}}] is better written in dot notation.',
                useBrackets: '.{{key}} is a syntax error.'
              }
            }
          },
          'explicit-function-return-type': {
            create: [Function: create],
            defaultOptions: [
              {
                allowExpressions: false,
                allowTypedFunctionExpressions: true,
                allowHigherOrderFunctions: true,
                allowDirectConstAssertionInArrowFunctions: true,
                allowConciseArrowFunctionExpressionsStartingWithVoid: false,
                allowFunctionsWithoutTypeParameters: false,
                allowedNames: [],
                allowIIFEs: false
              }
            ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Require explicit return types on functions and class methods',
                url: 'https://typescript-eslint.io/rules/explicit-function-return-type'
              },
              messages: { missingReturnType: 'Missing return type on function.' },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowConciseArrowFunctionExpressionsStartingWithVoid: {
                      description: 'Whether to allow arrow functions that start with the `void` keyword.',
                      type: 'boolean'
                    },
                    allowExpressions: {
                      description: 'Whether to ignore function expressions (functions which are not part of a declaration).',
                      type: 'boolean'
                    },
                    allowHigherOrderFunctions: {
                      description: 'Whether to ignore functions immediately returning another function expression.',
                      type: 'boolean'
                    },
                    allowTypedFunctionExpressions: {
                      description: 'Whether to ignore type annotations on the variable of function expressions.',
                      type: 'boolean'
                    },
                    allowDirectConstAssertionInArrowFunctions: {
                      description: 'Whether to ignore arrow functions immediately returning a `as const` value.',
                      type: 'boolean'
                    },
                    allowFunctionsWithoutTypeParameters: {
                      description: "Whether to ignore functions that don't have generic type parameters.",
                      type: 'boolean'
                    },
                    allowedNames: {
                      description: 'An array of function/method names that will not have their arguments or return values checked.',
                      items: { type: 'string' },
                      type: 'array'
                    },
                    allowIIFEs: {
                      description: 'Whether to ignore immediately invoked function expressions (IIFEs).',
                      type: 'boolean'
                    }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'explicit-member-accessibility': {
            create: [Function: create],
            defaultOptions: [ { accessibility: 'explicit' } ],
            meta: {
              hasSuggestions: true,
              type: 'problem',
              docs: {
                description: 'Require explicit accessibility modifiers on class properties and methods',
                url: 'https://typescript-eslint.io/rules/explicit-member-accessibility'
              },
              fixable: 'code',
              messages: {
                missingAccessibility: 'Missing accessibility modifier on {{type}} {{name}}.',
                unwantedPublicAccessibility: 'Public accessibility modifier on {{type}} {{name}}.',
                addExplicitAccessibility: "Add '{{ type }}' accessibility modifier"
              },
              schema: [
                {
                  '$defs': {
                    accessibilityLevel: {
                      oneOf: [
                        {
                          type: 'string',
                          enum: [ 'explicit' ],
                          description: 'Always require an accessor.'
                        },
                        {
                          type: 'string',
                          enum: [ 'no-public' ],
                          description: 'Require an accessor except when public.'
                        },
                        {
                          type: 'string',
                          enum: [ 'off' ],
                          description: 'Never check whether there is an accessor.'
                        }
                      ]
                    }
                  },
                  type: 'object',
                  properties: {
                    accessibility: { '$ref': '#/items/0/$defs/accessibilityLevel' },
                    overrides: {
                      type: 'object',
                      properties: {
                        accessors: {
                          '$ref': '#/items/0/$defs/accessibilityLevel'
                        },
                        constructors: {
                          '$ref': '#/items/0/$defs/accessibilityLevel'
                        },
                        methods: {
                          '$ref': '#/items/0/$defs/accessibilityLevel'
                        },
                        properties: {
                          '$ref': '#/items/0/$defs/accessibilityLevel'
                        },
                        parameterProperties: {
                          '$ref': '#/items/0/$defs/accessibilityLevel'
                        }
                      },
                      additionalProperties: false
                    },
                    ignoredMethodNames: { type: 'array', items: { type: 'string' } }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'explicit-module-boundary-types': {
            create: [Function: create],
            defaultOptions: [
              {
                allowArgumentsExplicitlyTypedAsAny: false,
                allowDirectConstAssertionInArrowFunctions: true,
                allowedNames: [],
                allowHigherOrderFunctions: true,
                allowTypedFunctionExpressions: true
              }
            ],
            meta: {
              type: 'problem',
              docs: {
                description: "Require explicit return and argument types on exported functions' and classes' public class methods",
                url: 'https://typescript-eslint.io/rules/explicit-module-boundary-types'
              },
              messages: {
                missingReturnType: 'Missing return type on function.',
                missingArgType: "Argument '{{name}}' should be typed.",
                missingArgTypeUnnamed: '{{type}} argument should be typed.',
                anyTypedArg: "Argument '{{name}}' should be typed with a non-any type.",
                anyTypedArgUnnamed: '{{type}} argument should be typed with a non-any type.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowArgumentsExplicitlyTypedAsAny: {
                      description: 'Whether to ignore arguments that are explicitly typed as `any`.',
                      type: 'boolean'
                    },
                    allowDirectConstAssertionInArrowFunctions: {
                      description: 'Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\n' +
                        'You must still type the parameters of the function.',
                      type: 'boolean'
                    },
                    allowedNames: {
                      description: 'An array of function/method names that will not have their arguments or return values checked.',
                      items: { type: 'string' },
                      type: 'array'
                    },
                    allowHigherOrderFunctions: {
                      description: 'Whether to ignore return type annotations on functions immediately returning another function expression.\n' +
                        'You must still type the parameters of the function.',
                      type: 'boolean'
                    },
                    allowTypedFunctionExpressions: {
                      description: 'Whether to ignore type annotations on the variable of a function expression.',
                      type: 'boolean'
                    }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'init-declarations': {
            create: [Function: create],
            defaultOptions: [ 'always' ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require or disallow initialization in variable declarations',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/init-declarations'
              },
              hasSuggestions: undefined,
              schema: {
                anyOf: [
                  {
                    type: 'array',
                    items: [ { enum: [ 'always' ] } ],
                    minItems: 0,
                    maxItems: 1
                  },
                  {
                    type: 'array',
                    items: [
                      { enum: [ 'never' ] },
                      {
                        type: 'object',
                        properties: { ignoreForLoopInit: { type: 'boolean' } },
                        additionalProperties: false
                      }
                    ],
                    minItems: 0,
                    maxItems: 2
                  }
                ]
              },
              messages: {
                initialized: "Variable '{{idName}}' should be initialized on declaration.",
                notInitialized: "Variable '{{idName}}' should not be initialized on declaration."
              }
            }
          },
          'max-params': {
            create: [Function: create],
            defaultOptions: [ { max: 3, countVoidThis: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce a maximum number of parameters in function definitions',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/max-params'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    maximum: { type: 'integer', minimum: 0 },
                    max: { type: 'integer', minimum: 0 },
                    countVoidThis: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                exceed: '{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.'
              }
            }
          },
          'member-ordering': {
            create: [Function: create],
            defaultOptions: [
              {
                default: {
                  memberTypes: [
                    'signature',
                    'call-signature',
                    'public-static-field',
                    'protected-static-field',
                    'private-static-field',
                    '#private-static-field',
                    'public-decorated-field',
                    'protected-decorated-field',
                    'private-decorated-field',
                    'public-instance-field',
                    'protected-instance-field',
                    'private-instance-field',
                    '#private-instance-field',
                    'public-abstract-field',
                    'protected-abstract-field',
                    'public-field',
                    'protected-field',
                    'private-field',
                    '#private-field',
                    'static-field',
                    'instance-field',
                    'abstract-field',
                    'decorated-field',
                    'field',
                    'static-initialization',
                    'public-constructor',
                    'protected-constructor',
                    'private-constructor',
                    'constructor',
                    'public-static-accessor',
                    'protected-static-accessor',
                    'private-static-accessor',
                    '#private-static-accessor',
                    'public-decorated-accessor',
                    'protected-decorated-accessor',
                    'private-decorated-accessor',
                    'public-instance-accessor',
                    'protected-instance-accessor',
                    'private-instance-accessor',
                    '#private-instance-accessor',
                    'public-abstract-accessor',
                    'protected-abstract-accessor',
                    'public-accessor',
                    'protected-accessor',
                    'private-accessor',
                    '#private-accessor',
                    'static-accessor',
                    'instance-accessor',
                    'abstract-accessor',
                    'decorated-accessor',
                    'accessor',
                    'public-static-get',
                    'protected-static-get',
                    'private-static-get',
                    '#private-static-get',
                    'public-decorated-get',
                    'protected-decorated-get',
                    'private-decorated-get',
                    'public-instance-get',
                    'protected-instance-get',
                    'private-instance-get',
                    '#private-instance-get',
                    'public-abstract-get',
                    'protected-abstract-get',
                    'public-get',
                    'protected-get',
                    'private-get',
                    '#private-get',
                    'static-get',
                    'instance-get',
                    'abstract-get',
                    'decorated-get',
                    'get',
                    'public-static-set',
                    'protected-static-set',
                    'private-static-set',
                    '#private-static-set',
                    'public-decorated-set',
                    'protected-decorated-set',
                    'private-decorated-set',
                    'public-instance-set',
                    'protected-instance-set',
                    'private-instance-set',
                    '#private-instance-set',
                    'public-abstract-set',
                    'protected-abstract-set',
                    'public-set',
                    'protected-set',
                    'private-set',
                    '#private-set',
                    'static-set',
                    'instance-set',
                    'abstract-set',
                    'decorated-set',
                    'set',
                    'public-static-method',
                    'protected-static-method',
                    'private-static-method',
                    '#private-static-method',
                    'public-decorated-method',
                    ... 17 more items
                  ]
                }
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require a consistent member declaration order',
                url: 'https://typescript-eslint.io/rules/member-ordering'
              },
              messages: {
                incorrectOrder: 'Member {{member}} should be declared before member {{beforeMember}}.',
                incorrectGroupOrder: 'Member {{name}} should be declared before all {{rank}} definitions.',
                incorrectRequiredMembersOrder: 'Member {{member}} should be declared after all {{optionalOrRequired}} members.'
              },
              schema: [
                {
                  '$defs': {
                    orderOptions: {
                      type: 'string',
                      enum: [
                        'alphabetically',
                        'alphabetically-case-insensitive',
                        'as-written',
                        'natural',
                        'natural-case-insensitive'
                      ]
                    },
                    optionalityOrderOptions: {
                      type: 'string',
                      enum: [ 'optional-first', 'required-first' ]
                    },
                    allItems: {
                      type: 'string',
                      enum: [
                        'readonly-signature',
                        'signature',
                        'readonly-field',
                        'public-readonly-field',
                        'public-decorated-readonly-field',
                        'decorated-readonly-field',
                        'static-readonly-field',
                        'public-static-readonly-field',
                        'instance-readonly-field',
                        'public-instance-readonly-field',
                        'abstract-readonly-field',
                        'public-abstract-readonly-field',
                        'protected-readonly-field',
                        'protected-decorated-readonly-field',
                        'protected-static-readonly-field',
                        'protected-instance-readonly-field',
                        'protected-abstract-readonly-field',
                        'private-readonly-field',
                        'private-decorated-readonly-field',
                        'private-static-readonly-field',
                        'private-instance-readonly-field',
                        '#private-readonly-field',
                        '#private-static-readonly-field',
                        '#private-instance-readonly-field',
                        'field',
                        'public-field',
                        'public-decorated-field',
                        'decorated-field',
                        'static-field',
                        'public-static-field',
                        'instance-field',
                        'public-instance-field',
                        'abstract-field',
                        'public-abstract-field',
                        'protected-field',
                        'protected-decorated-field',
                        'protected-static-field',
                        'protected-instance-field',
                        'protected-abstract-field',
                        'private-field',
                        'private-decorated-field',
                        'private-static-field',
                        'private-instance-field',
                        '#private-field',
                        '#private-static-field',
                        '#private-instance-field',
                        'method',
                        'public-method',
                        'public-decorated-method',
                        'decorated-method',
                        'static-method',
                        'public-static-method',
                        'instance-method',
                        'public-instance-method',
                        'abstract-method',
                        'public-abstract-method',
                        'protected-method',
                        'protected-decorated-method',
                        'protected-static-method',
                        'protected-instance-method',
                        'protected-abstract-method',
                        'private-method',
                        'private-decorated-method',
                        'private-static-method',
                        'private-instance-method',
                        '#private-method',
                        '#private-static-method',
                        '#private-instance-method',
                        'call-signature',
                        'constructor',
                        'public-constructor',
                        'protected-constructor',
                        'private-constructor',
                        'accessor',
                        'public-accessor',
                        'public-decorated-accessor',
                        'decorated-accessor',
                        'static-accessor',
                        'public-static-accessor',
                        'instance-accessor',
                        'public-instance-accessor',
                        'abstract-accessor',
                        'public-abstract-accessor',
                        'protected-accessor',
                        'protected-decorated-accessor',
                        'protected-static-accessor',
                        'protected-instance-accessor',
                        'protected-abstract-accessor',
                        'private-accessor',
                        'private-decorated-accessor',
                        'private-static-accessor',
                        'private-instance-accessor',
                        '#private-accessor',
                        '#private-static-accessor',
                        '#private-instance-accessor',
                        'get',
                        'public-get',
                        'public-decorated-get',
                        'decorated-get',
                        'static-get',
                        ... 53 more items
                      ]
                    },
                    typeItems: {
                      type: 'string',
                      enum: [
                        'readonly-signature',
                        'signature',
                        'readonly-field',
                        'field',
                        'method',
                        'constructor'
                      ]
                    },
                    baseConfig: {
                      oneOf: [
                        { type: 'string', enum: [ 'never' ] },
                        {
                          type: 'array',
                          items: {
                            oneOf: [
                              { '$ref': '#/items/0/$defs/allItems' },
                              {
                                type: 'array',
                                items: { '$ref': '#/items/0/$defs/allItems' }
                              }
                            ]
                          }
                        },
                        {
                          type: 'object',
                          properties: {
                            memberTypes: {
                              oneOf: [
                                {
                                  type: 'array',
                                  items: {
                                    oneOf: [
                                      {
                                        '$ref': '#/items/0/$defs/allItems'
                                      },
                                      {
                                        type: 'array',
                                        items: {
                                          '$ref': '#/items/0/$defs/allItems'
                                        }
                                      }
                                    ]
                                  }
                                },
                                { type: 'string', enum: [ 'never' ] }
                              ]
                            },
                            order: { '$ref': '#/items/0/$defs/orderOptions' },
                            optionalityOrder: {
                              '$ref': '#/items/0/$defs/optionalityOrderOptions'
                            }
                          },
                          additionalProperties: false
                        }
                      ]
                    },
                    typesConfig: {
                      oneOf: [
                        { type: 'string', enum: [ 'never' ] },
                        {
                          type: 'array',
                          items: {
                            oneOf: [
                              { '$ref': '#/items/0/$defs/typeItems' },
                              {
                                type: 'array',
                                items: { '$ref': '#/items/0/$defs/typeItems' }
                              }
                            ]
                          }
                        },
                        {
                          type: 'object',
                          properties: {
                            memberTypes: {
                              oneOf: [
                                {
                                  type: 'array',
                                  items: {
                                    oneOf: [
                                      {
                                        '$ref': '#/items/0/$defs/typeItems'
                                      },
                                      {
                                        type: 'array',
                                        items: {
                                          '$ref': '#/items/0/$defs/typeItems'
                                        }
                                      }
                                    ]
                                  }
                                },
                                { type: 'string', enum: [ 'never' ] }
                              ]
                            },
                            order: { '$ref': '#/items/0/$defs/orderOptions' },
                            optionalityOrder: {
                              '$ref': '#/items/0/$defs/optionalityOrderOptions'
                            }
                          },
                          additionalProperties: false
                        }
                      ]
                    }
                  },
                  type: 'object',
                  properties: {
                    default: { '$ref': '#/items/0/$defs/baseConfig' },
                    classes: { '$ref': '#/items/0/$defs/baseConfig' },
                    classExpressions: { '$ref': '#/items/0/$defs/baseConfig' },
                    interfaces: { '$ref': '#/items/0/$defs/typesConfig' },
                    typeLiterals: { '$ref': '#/items/0/$defs/typesConfig' }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'method-signature-style': {
            create: [Function: create],
            defaultOptions: [ 'property' ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce using a particular method signature syntax',
                url: 'https://typescript-eslint.io/rules/method-signature-style'
              },
              fixable: 'code',
              messages: {
                errorMethod: 'Shorthand method signature is forbidden. Use a function property instead.',
                errorProperty: 'Function property signature is forbidden. Use a method shorthand instead.'
              },
              schema: [ { type: 'string', enum: [ 'property', 'method' ] } ]
            }
          },
          'naming-convention': {
            create: [Function: create],
            defaultOptions: [
              {
                selector: 'default',
                format: [ 'camelCase' ],
                leadingUnderscore: 'allow',
                trailingUnderscore: 'allow'
              },
              {
                selector: 'import',
                format: [ 'camelCase', 'PascalCase' ]
              },
              {
                selector: 'variable',
                format: [ 'camelCase', 'UPPER_CASE' ],
                leadingUnderscore: 'allow',
                trailingUnderscore: 'allow'
              },
              { selector: 'typeLike', format: [ 'PascalCase' ] }
            ],
            meta: {
              docs: {
                description: 'Enforce naming conventions for everything across a codebase',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/naming-convention'
              },
              type: 'suggestion',
              messages: {
                unexpectedUnderscore: '{{type}} name `{{name}}` must not have a {{position}} underscore.',
                missingUnderscore: '{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).',
                missingAffix: '{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}',
                satisfyCustom: '{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}',
                doesNotMatchFormat: '{{type}} name `{{name}}` must match one of the following formats: {{formats}}',
                doesNotMatchFormatTrimmed: '{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}'
              },
              schema: {
                '$defs': {
                  underscoreOptions: {
                    type: 'string',
                    enum: [
                      'forbid',
                      'allow',
                      'require',
                      'requireDouble',
                      'allowDouble',
                      'allowSingleOrDouble'
                    ]
                  },
                  predefinedFormats: {
                    type: 'string',
                    enum: [
                      'camelCase',
                      'strictCamelCase',
                      'PascalCase',
                      'StrictPascalCase',
                      'snake_case',
                      'UPPER_CASE'
                    ]
                  },
                  typeModifiers: {
                    type: 'string',
                    enum: [
                      'boolean',
                      'string',
                      'number',
                      'function',
                      'array'
                    ]
                  },
                  prefixSuffixConfig: {
                    type: 'array',
                    items: { type: 'string', minLength: 1 },
                    additionalItems: false
                  },
                  matchRegexConfig: {
                    type: 'object',
                    additionalProperties: false,
                    properties: {
                      match: { type: 'boolean' },
                      regex: { type: 'string' }
                    },
                    required: [ 'match', 'regex' ]
                  },
                  formatOptionsConfig: {
                    oneOf: [
                      {
                        type: 'array',
                        items: { '$ref': '#/$defs/predefinedFormats' },
                        additionalItems: false
                      },
                      { type: 'null' }
                    ]
                  }
                },
                type: 'array',
                items: {
                  oneOf: [
                    {
                      type: 'object',
                      description: 'Multiple selectors in one config',
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'default',
                              'variableLike',
                              'memberLike',
                              'typeLike',
                              'method',
                              'property',
                              'accessor',
                              'variable',
                              'function',
                              'parameter',
                              'parameterProperty',
                              'classicAccessor',
                              'enumMember',
                              'classMethod',
                              'objectLiteralMethod',
                              'typeMethod',
                              'classProperty',
                              'objectLiteralProperty',
                              'typeProperty',
                              'autoAccessor',
                              'class',
                              'interface',
                              'typeAlias',
                              'enum',
                              'typeParameter',
                              'import'
                            ]
                          },
                          additionalItems: false
                        },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'const',
                              'readonly',
                              'static',
                              'public',
                              'protected',
                              'private',
                              '#private',
                              'abstract',
                              'destructured',
                              'global',
                              'exported',
                              'unused',
                              'requiresQuotes',
                              'override',
                              'async',
                              'default',
                              'namespace'
                            ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'default'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'default' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'const',
                              'readonly',
                              'static',
                              'public',
                              'protected',
                              'private',
                              '#private',
                              'abstract',
                              'destructured',
                              'global',
                              'exported',
                              'unused',
                              'requiresQuotes',
                              'override',
                              'async',
                              'default',
                              'namespace'
                            ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'variableLike'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'variableLike' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'unused', 'async' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'variable'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'variable' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'const',
                              'destructured',
                              'exported',
                              'global',
                              'unused',
                              'async'
                            ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'function'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'function' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'exported', 'global', 'unused', 'async' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'parameter'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'parameter' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'destructured', 'unused' ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'memberLike'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'memberLike' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'abstract',
                              'private',
                              '#private',
                              'protected',
                              'public',
                              'readonly',
                              'requiresQuotes',
                              'static',
                              'override',
                              'async'
                            ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'classProperty'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'classProperty' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'abstract',
                              'private',
                              '#private',
                              'protected',
                              'public',
                              'readonly',
                              'requiresQuotes',
                              'static',
                              'override'
                            ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'objectLiteralProperty'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: {
                          type: 'string',
                          enum: [ 'objectLiteralProperty' ]
                        },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'public', 'requiresQuotes' ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'typeProperty'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'typeProperty' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'public', 'readonly', 'requiresQuotes' ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'parameterProperty'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: {
                          type: 'string',
                          enum: [ 'parameterProperty' ]
                        },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'private',
                              'protected',
                              'public',
                              'readonly'
                            ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'property'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'property' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'abstract',
                              'private',
                              '#private',
                              'protected',
                              'public',
                              'readonly',
                              'requiresQuotes',
                              'static',
                              'override',
                              'async'
                            ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'classMethod'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'classMethod' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'abstract',
                              'private',
                              '#private',
                              'protected',
                              'public',
                              'requiresQuotes',
                              'static',
                              'override',
                              'async'
                            ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'objectLiteralMethod'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: {
                          type: 'string',
                          enum: [ 'objectLiteralMethod' ]
                        },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'public', 'requiresQuotes', 'async' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'typeMethod'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'typeMethod' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'public', 'requiresQuotes' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'method'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'method' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'abstract',
                              'private',
                              '#private',
                              'protected',
                              'public',
                              'requiresQuotes',
                              'static',
                              'override',
                              'async'
                            ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'classicAccessor'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'classicAccessor' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'abstract',
                              'private',
                              'protected',
                              'public',
                              'requiresQuotes',
                              'static',
                              'override'
                            ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'autoAccessor'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'autoAccessor' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'abstract',
                              'private',
                              'protected',
                              'public',
                              'requiresQuotes',
                              'static',
                              'override'
                            ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'accessor'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'accessor' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [
                              'abstract',
                              'private',
                              'protected',
                              'public',
                              'requiresQuotes',
                              'static',
                              'override'
                            ]
                          },
                          additionalItems: false
                        },
                        types: {
                          type: 'array',
                          items: { '$ref': '#/$defs/typeModifiers' },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'enumMember'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'enumMember' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'requiresQuotes' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'typeLike'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'typeLike' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'abstract', 'exported', 'unused' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'class'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'class' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'abstract', 'exported', 'unused' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'interface'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'interface' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'exported', 'unused' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'typeAlias'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'typeAlias' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'exported', 'unused' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'enum'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'enum' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'exported', 'unused' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'typeParameter'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'typeParameter' ] },
                        modifiers: {
                          type: 'array',
                          items: { type: 'string', enum: [ 'unused' ] },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      description: "Selector 'import'",
                      properties: {
                        format: { '$ref': '#/$defs/formatOptionsConfig' },
                        custom: { '$ref': '#/$defs/matchRegexConfig' },
                        leadingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        trailingUnderscore: { '$ref': '#/$defs/underscoreOptions' },
                        prefix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        suffix: { '$ref': '#/$defs/prefixSuffixConfig' },
                        failureMessage: { type: 'string' },
                        filter: {
                          oneOf: [
                            { type: 'string', minLength: 1 },
                            { '$ref': '#/$defs/matchRegexConfig' }
                          ]
                        },
                        selector: { type: 'string', enum: [ 'import' ] },
                        modifiers: {
                          type: 'array',
                          items: {
                            type: 'string',
                            enum: [ 'default', 'namespace' ]
                          },
                          additionalItems: false
                        }
                      },
                      required: [ 'selector', 'format' ],
                      additionalProperties: false
                    }
                  ]
                },
                additionalItems: false
              }
            }
          },
          'no-array-constructor': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow generic `Array` constructors',
                recommended: 'recommended',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-array-constructor'
              },
              fixable: 'code',
              messages: {
                useLiteral: 'The array literal notation [] is preferable.'
              },
              schema: []
            }
          },
          'no-array-delete': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              hasSuggestions: true,
              type: 'problem',
              docs: {
                description: 'Disallow using the `delete` operator on array values',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-array-delete'
              },
              messages: {
                noArrayDelete: 'Using the `delete` operator with an array expression is unsafe.',
                useSplice: 'Use `array.splice()` instead.'
              },
              schema: []
            }
          },
          'no-base-to-string': {
            create: [Function: create],
            defaultOptions: [
              {
                ignoredTypeNames: [ 'Error', 'RegExp', 'URL', 'URLSearchParams' ]
              }
            ],
            meta: {
              docs: {
                description: 'Require `.toString()` to only be called on objects which provide useful information when stringified',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-base-to-string'
              },
              messages: {
                baseToString: "'{{name}}' {{certainty}} use Object's default stringification format ('[object Object]') when stringified."
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    ignoredTypeNames: { type: 'array', items: { type: 'string' } }
                  },
                  additionalProperties: false
                }
              ],
              type: 'suggestion'
            }
          },
          'no-confusing-non-null-assertion': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow non-null assertion in locations that may be confusing',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/no-confusing-non-null-assertion'
              },
              hasSuggestions: true,
              messages: {
                confusingEqual: 'Confusing combinations of non-null assertion and equal test like "a! == b", which looks very similar to not equal "a !== b".',
                confusingAssign: 'Confusing combinations of non-null assertion and equal test like "a! = b", which looks very similar to not equal "a != b".',
                notNeedInEqualTest: 'Unnecessary non-null assertion (!) in equal test.',
                notNeedInAssign: 'Unnecessary non-null assertion (!) in assignment left hand.',
                wrapUpLeft: 'Wrap up left hand to avoid putting non-null assertion "!" and "=" together.'
              },
              schema: []
            }
          },
          'no-confusing-void-expression': {
            create: [Function: create],
            defaultOptions: [
              {
                ignoreArrowShorthand: false,
                ignoreVoidOperator: false
              }
            ],
            meta: {
              docs: {
                description: 'Require expressions of type void to appear in statement position',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-confusing-void-expression'
              },
              messages: {
                invalidVoidExpr: 'Placing a void expression inside another expression is forbidden. Move it to its own statement instead.',
                invalidVoidExprWrapVoid: 'Void expressions used inside another expression must be moved to its own statement or marked explicitly with the `void` operator.',
                invalidVoidExprArrow: 'Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.',
                invalidVoidExprArrowWrapVoid: 'Void expressions returned from an arrow function shorthand must be marked explicitly with the `void` operator.',
                invalidVoidExprReturn: 'Returning a void expression from a function is forbidden. Please move it before the `return` statement.',
                invalidVoidExprReturnLast: 'Returning a void expression from a function is forbidden. Please remove the `return` statement.',
                invalidVoidExprReturnWrapVoid: 'Void expressions returned from a function must be marked explicitly with the `void` operator.',
                voidExprWrapVoid: 'Mark with an explicit `void` operator.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    ignoreArrowShorthand: { type: 'boolean' },
                    ignoreVoidOperator: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ],
              type: 'problem',
              fixable: 'code',
              hasSuggestions: true
            }
          },
          'no-dupe-class-members': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow duplicate class members',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-dupe-class-members'
              },
              hasSuggestions: undefined,
              schema: [],
              messages: { unexpected: "Duplicate name '{{name}}'." }
            }
          },
          'no-duplicate-enum-values': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow duplicate enum member values',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-duplicate-enum-values'
              },
              hasSuggestions: false,
              messages: {
                duplicateValue: 'Duplicate enum member value {{value}}.'
              },
              schema: []
            }
          },
          'no-duplicate-type-constituents': {
            create: [Function: create],
            defaultOptions: [ { ignoreIntersections: false, ignoreUnions: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow duplicate constituents of union or intersection types',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-duplicate-type-constituents'
              },
              fixable: 'code',
              messages: {
                duplicate: '{{type}} type constituent is duplicated with {{previous}}.'
              },
              schema: [
                {
                  additionalProperties: false,
                  type: 'object',
                  properties: {
                    ignoreIntersections: { type: 'boolean' },
                    ignoreUnions: { type: 'boolean' }
                  }
                }
              ]
            }
          },
          'no-dynamic-delete': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow using the `delete` operator on computed key expressions',
                recommended: 'strict',
                url: 'https://typescript-eslint.io/rules/no-dynamic-delete'
              },
              fixable: 'code',
              messages: {
                dynamicDelete: 'Do not delete dynamically computed property keys.'
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'no-empty-function': {
            create: [Function: create],
            defaultOptions: [ { allow: [] } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow empty functions',
                recommended: 'stylistic',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-empty-function'
              },
              hasSuggestions: undefined,
              schema: [
                {
                  type: 'object',
                  properties: {
                    allow: {
                      type: 'array',
                      items: {
                        enum: [
                          'functions',
                          'arrowFunctions',
                          'generatorFunctions',
                          'methods',
                          'generatorMethods',
                          'getters',
                          'setters',
                          'constructors',
                          'private-constructors',
                          'protected-constructors',
                          'asyncFunctions',
                          'asyncMethods',
                          'decoratedFunctions',
                          'overrideMethods'
                        ],
                        type: 'string'
                      },
                      uniqueItems: true
                    }
                  },
                  additionalProperties: false
                }
              ],
              messages: { unexpected: 'Unexpected empty {{name}}.' }
            }
          },
          'no-empty-interface': {
            create: [Function: create],
            defaultOptions: [ { allowSingleExtends: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow the declaration of empty interfaces',
                url: 'https://typescript-eslint.io/rules/no-empty-interface'
              },
              deprecated: true,
              replacedBy: [ '@typescript-eslint/no-empty-object-type' ],
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                noEmpty: 'An empty interface is equivalent to `{}`.',
                noEmptyWithSuper: 'An interface declaring no members is equivalent to its supertype.'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: { allowSingleExtends: { type: 'boolean' } }
                }
              ]
            }
          },
          'no-empty-object-type': {
            create: [Function: create],
            defaultOptions: [ { allowInterfaces: 'never', allowObjectTypes: 'never' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow accidentally using the "empty object" type',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-empty-object-type'
              },
              hasSuggestions: true,
              messages: {
                noEmptyInterface: 'An empty interface declaration allows any non-nullish value, including literals like `0` and `""`.\n' +
                  "- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.\n" +
                  '- If you want a type meaning "any object", you probably want `object` instead.\n' +
                  '- If you want a type meaning "any value", you probably want `unknown` instead.',
                noEmptyObject: 'The `{}` ("empty object") type allows any non-nullish value, including literals like `0` and `""`.\n' +
                  "- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.\n" +
                  '- If you want a type meaning "any object", you probably want `object` instead.\n' +
                  '- If you want a type meaning "any value", you probably want `unknown` instead.',
                noEmptyInterfaceWithSuper: 'An interface declaring no members is equivalent to its supertype.',
                replaceEmptyInterface: 'Replace empty interface with `{{replacement}}`.',
                replaceEmptyInterfaceWithSuper: 'Replace empty interface with a type alias.',
                replaceEmptyObjectType: 'Replace `{}` with `{{replacement}}`.'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    allowInterfaces: {
                      enum: [ 'always', 'never', 'with-single-extends' ],
                      type: 'string'
                    },
                    allowObjectTypes: {
                      enum: [ 'always', 'in-type-alias-with-name', 'never' ],
                      type: 'string'
                    },
                    allowWithName: { type: 'string' }
                  }
                }
              ]
            }
          },
          'no-explicit-any': {
            create: [Function: create],
            defaultOptions: [ { fixToUnknown: false, ignoreRestArgs: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow the `any` type',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-explicit-any'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                unexpectedAny: 'Unexpected any. Specify a different type.',
                suggestUnknown: 'Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.',
                suggestNever: "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    fixToUnknown: {
                      description: 'Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.',
                      type: 'boolean'
                    },
                    ignoreRestArgs: {
                      description: 'Whether to ignore rest parameter arrays.',
                      type: 'boolean'
                    }
                  }
                }
              ]
            }
          },
          'no-extra-non-null-assertion': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow extra non-null assertions',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-extra-non-null-assertion'
              },
              fixable: 'code',
              schema: [],
              messages: {
                noExtraNonNullAssertion: 'Forbidden extra non-null assertion.'
              }
            }
          },
          'no-extraneous-class': {
            create: [Function: create],
            defaultOptions: [
              {
                allowConstructorOnly: false,
                allowEmpty: false,
                allowStaticOnly: false,
                allowWithDecorator: false
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow classes used as namespaces',
                recommended: 'strict',
                url: 'https://typescript-eslint.io/rules/no-extraneous-class'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    allowConstructorOnly: {
                      description: 'Whether to allow extraneous classes that contain only a constructor.',
                      type: 'boolean'
                    },
                    allowEmpty: {
                      description: 'Whether to allow extraneous classes that have no body (i.e. are empty).',
                      type: 'boolean'
                    },
                    allowStaticOnly: {
                      description: 'Whether to allow extraneous classes that only contain static members.',
                      type: 'boolean'
                    },
                    allowWithDecorator: {
                      description: 'Whether to allow extraneous classes that include a decorator.',
                      type: 'boolean'
                    }
                  }
                }
              ],
              messages: {
                empty: 'Unexpected empty class.',
                onlyStatic: 'Unexpected class with only static properties.',
                onlyConstructor: 'Unexpected class with only a constructor.'
              }
            }
          },
          'no-floating-promises': {
            create: [Function: create],
            defaultOptions: [
              {
                ignoreVoid: true,
                ignoreIIFE: false,
                allowForKnownSafePromises: [],
                allowForKnownSafeCalls: []
              }
            ],
            meta: {
              docs: {
                description: 'Require Promise-like statements to be handled appropriately',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-floating-promises'
              },
              hasSuggestions: true,
              messages: {
                floating: 'Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.',
                floatingFixAwait: 'Add await operator.',
                floatingVoid: 'Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.',
                floatingFixVoid: 'Add void operator to ignore.',
                floatingUselessRejectionHandler: 'Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.',
                floatingUselessRejectionHandlerVoid: 'Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator. A rejection handler that is not a function will be ignored.',
                floatingPromiseArray: "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
                floatingPromiseArrayVoid: "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the `void` operator."
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    ignoreVoid: {
                      description: 'Whether to ignore `void` expressions.',
                      type: 'boolean'
                    },
                    ignoreIIFE: {
                      description: 'Whether to ignore async IIFEs (Immediately Invoked Function Expressions).',
                      type: 'boolean'
                    },
                    allowForKnownSafePromises: {
                      type: 'array',
                      items: {
                        oneOf: [
                          { type: 'string' },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'file' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              },
                              path: { type: 'string' }
                            },
                            required: [ 'from', 'name' ]
                          },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'lib' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              }
                            },
                            required: [ 'from', 'name' ]
                          },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'package' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              },
                              package: { type: 'string' }
                            },
                            required: [ 'from', 'name', 'package' ]
                          }
                        ]
                      }
                    },
                    allowForKnownSafeCalls: {
                      type: 'array',
                      items: {
                        oneOf: [
                          { type: 'string' },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'file' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              },
                              path: { type: 'string' }
                            },
                            required: [ 'from', 'name' ]
                          },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'lib' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              }
                            },
                            required: [ 'from', 'name' ]
                          },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'package' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              },
                              package: { type: 'string' }
                            },
                            required: [ 'from', 'name', 'package' ]
                          }
                        ]
                      }
                    }
                  },
                  additionalProperties: false
                }
              ],
              type: 'problem'
            }
          },
          'no-for-in-array': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow iterating over an array with a for-in loop',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-for-in-array'
              },
              messages: {
                forInViolation: 'For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.'
              },
              schema: [],
              type: 'problem'
            }
          },
          'no-implied-eval': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow the use of `eval()`-like methods',
                recommended: 'recommended',
                extendsBaseRule: true,
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-implied-eval'
              },
              messages: {
                noImpliedEvalError: 'Implied eval. Consider passing a function.',
                noFunctionConstructor: 'Implied eval. Do not use the Function constructor to create functions.'
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'no-import-type-side-effects': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers',
                url: 'https://typescript-eslint.io/rules/no-import-type-side-effects'
              },
              fixable: 'code',
              messages: {
                useTopLevelQualifier: 'TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.'
              },
              schema: []
            }
          },
          'no-inferrable-types': {
            create: [Function: create],
            defaultOptions: [ { ignoreParameters: false, ignoreProperties: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/no-inferrable-types'
              },
              fixable: 'code',
              messages: {
                noInferrableType: 'Type {{type}} trivially inferred from a {{type}} literal, remove type annotation.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    ignoreParameters: { type: 'boolean' },
                    ignoreProperties: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'no-invalid-this': {
            create: [Function: create],
            defaultOptions: [ { capIsConstructor: true } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow `this` keywords outside of classes or class-like objects',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-invalid-this'
              },
              messages: { unexpectedThis: "Unexpected 'this'." },
              hasSuggestions: undefined,
              schema: [
                {
                  type: 'object',
                  properties: {
                    capIsConstructor: { type: 'boolean', default: true }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'no-invalid-void-type': {
            create: [Function: create],
            defaultOptions: [
              {
                allowInGenericTypeArguments: true,
                allowAsThisParameter: false
              }
            ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow `void` type outside of generic or return types',
                recommended: 'strict',
                url: 'https://typescript-eslint.io/rules/no-invalid-void-type'
              },
              messages: {
                invalidVoidForGeneric: '{{ generic }} may not have void as a type argument.',
                invalidVoidNotReturnOrGeneric: 'void is only valid as a return type or generic type argument.',
                invalidVoidNotReturn: 'void is only valid as a return type.',
                invalidVoidNotReturnOrThisParam: 'void is only valid as return type or type of `this` parameter.',
                invalidVoidNotReturnOrThisParamOrGeneric: 'void is only valid as a return type or generic type argument or the type of a `this` parameter.',
                invalidVoidUnionConstituent: 'void is not valid as a constituent in a union type'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowInGenericTypeArguments: {
                      oneOf: [
                        { type: 'boolean' },
                        {
                          type: 'array',
                          items: { type: 'string' },
                          minItems: 1
                        }
                      ]
                    },
                    allowAsThisParameter: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'no-loop-func': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow function declarations that contain unsafe references inside loop statements',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-loop-func'
              },
              hasSuggestions: undefined,
              schema: [],
              messages: {
                unsafeRefs: 'Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.'
              }
            }
          },
          'no-loss-of-precision': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              deprecated: true,
              docs: {
                description: 'Disallow literal numbers that lose precision',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-loss-of-precision'
              },
              hasSuggestions: undefined,
              schema: [],
              messages: {
                noLossOfPrecision: 'This number literal will lose precision at runtime.'
              }
            }
          },
          'no-magic-numbers': {
            create: [Function: create],
            defaultOptions: [
              {
                ignore: [],
                ignoreArrayIndexes: false,
                enforceConst: false,
                detectObjects: false,
                ignoreNumericLiteralTypes: false,
                ignoreEnums: false,
                ignoreReadonlyClassProperties: false
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow magic numbers',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-magic-numbers'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    detectObjects: { type: 'boolean', default: false },
                    enforceConst: { type: 'boolean', default: false },
                    ignore: {
                      type: 'array',
                      items: {
                        anyOf: [
                          { type: 'number' },
                          {
                            type: 'string',
                            pattern: '^[+-]?(?:0|[1-9][0-9]*)n$'
                          }
                        ]
                      },
                      uniqueItems: true
                    },
                    ignoreArrayIndexes: { type: 'boolean', default: false },
                    ignoreDefaultValues: { type: 'boolean', default: false },
                    ignoreClassFieldInitialValues: { type: 'boolean', default: false },
                    ignoreNumericLiteralTypes: { type: 'boolean' },
                    ignoreEnums: { type: 'boolean' },
                    ignoreReadonlyClassProperties: { type: 'boolean' },
                    ignoreTypeIndexes: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                useConst: "Number constants declarations must use 'const'.",
                noMagic: 'No magic number: {{raw}}.'
              }
            }
          },
          'no-meaningless-void-operator': {
            create: [Function: create],
            defaultOptions: [ { checkNever: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow the `void` operator except when used to discard a value',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-meaningless-void-operator'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                meaninglessVoidOperator: "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
                removeVoid: "Remove 'void'"
              },
              schema: [
                {
                  type: 'object',
                  properties: { checkNever: { type: 'boolean', default: false } },
                  additionalProperties: false
                }
              ]
            }
          },
          'no-misused-new': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Enforce valid definition of `new` and `constructor`',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-misused-new'
              },
              schema: [],
              messages: {
                errorMessageInterface: 'Interfaces cannot be constructed, only classes.',
                errorMessageClass: 'Class cannot have method named `new`.'
              }
            }
          },
          'no-misused-promises': {
            create: [Function: create],
            defaultOptions: [
              {
                checksConditionals: true,
                checksVoidReturn: true,
                checksSpreads: true
              }
            ],
            meta: {
              docs: {
                description: 'Disallow Promises in places not designed to handle them',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-misused-promises'
              },
              messages: {
                voidReturnArgument: 'Promise returned in function argument where a void return was expected.',
                voidReturnVariable: 'Promise-returning function provided to variable where a void return was expected.',
                voidReturnProperty: 'Promise-returning function provided to property where a void return was expected.',
                voidReturnReturnValue: 'Promise-returning function provided to return value where a void return was expected.',
                voidReturnAttribute: 'Promise-returning function provided to attribute where a void return was expected.',
                conditional: 'Expected non-Promise value in a boolean conditional.',
                spread: 'Expected a non-Promise value to be spreaded in an object.'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    checksConditionals: { type: 'boolean' },
                    checksVoidReturn: {
                      oneOf: [
                        { type: 'boolean' },
                        {
                          additionalProperties: false,
                          properties: {
                            arguments: { type: 'boolean' },
                            attributes: { type: 'boolean' },
                            properties: { type: 'boolean' },
                            returns: { type: 'boolean' },
                            variables: { type: 'boolean' }
                          },
                          type: 'object'
                        }
                      ]
                    },
                    checksSpreads: { type: 'boolean' }
                  }
                }
              ],
              type: 'problem'
            }
          },
          'no-mixed-enums': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow enums from having both number and string members',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-mixed-enums'
              },
              messages: {
                mixed: 'Mixing number and string enums can be confusing.'
              },
              schema: [],
              type: 'problem'
            }
          },
          'no-namespace': {
            create: [Function: create],
            defaultOptions: [
              { allowDeclarations: false, allowDefinitionFiles: true }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow TypeScript namespaces',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-namespace'
              },
              messages: {
                moduleSyntaxIsPreferred: 'ES2015 module syntax is preferred over namespaces.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowDeclarations: {
                      description: 'Whether to allow `declare` with custom TypeScript namespaces.',
                      type: 'boolean'
                    },
                    allowDefinitionFiles: {
                      description: 'Whether to allow `declare` with custom TypeScript namespaces inside definition files.',
                      type: 'boolean'
                    }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'no-non-null-asserted-nullish-coalescing': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow non-null assertions in the left operand of a nullish coalescing operator',
                recommended: 'strict',
                url: 'https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing'
              },
              messages: {
                noNonNullAssertedNullishCoalescing: 'The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.',
                suggestRemovingNonNull: 'Remove the non-null assertion.'
              },
              schema: [],
              hasSuggestions: true
            }
          },
          'no-non-null-asserted-optional-chain': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow non-null assertions after an optional chain expression',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain'
              },
              hasSuggestions: true,
              messages: {
                noNonNullOptionalChain: 'Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.',
                suggestRemovingNonNull: 'You should remove the non-null assertion.'
              },
              schema: []
            }
          },
          'no-non-null-assertion': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow non-null assertions using the `!` postfix operator',
                recommended: 'strict',
                url: 'https://typescript-eslint.io/rules/no-non-null-assertion'
              },
              hasSuggestions: true,
              messages: {
                noNonNull: 'Forbidden non-null assertion.',
                suggestOptionalChain: 'Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.'
              },
              schema: []
            }
          },
          'no-redeclare': {
            create: [Function: create],
            defaultOptions: [ { builtinGlobals: true, ignoreDeclarationMerge: true } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow variable redeclaration',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-redeclare'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    builtinGlobals: { type: 'boolean' },
                    ignoreDeclarationMerge: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                redeclared: "'{{id}}' is already defined.",
                redeclaredAsBuiltin: "'{{id}}' is already defined as a built-in global variable.",
                redeclaredBySyntax: "'{{id}}' is already defined by a variable declaration."
              }
            }
          },
          'no-redundant-type-constituents': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow members of unions and intersections that do nothing or override type information',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-redundant-type-constituents'
              },
              messages: {
                literalOverridden: '{{literal}} is overridden by {{primitive}} in this union type.',
                primitiveOverridden: '{{primitive}} is overridden by the {{literal}} in this intersection type.',
                overridden: "'{{typeName}}' is overridden by other types in this {{container}} type.",
                overrides: "'{{typeName}}' overrides all other types in this {{container}} type."
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'no-require-imports': {
            create: [Function: create],
            defaultOptions: [ { allow: [], allowAsImport: false } ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow invocation of `require()`',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-require-imports'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allow: {
                      type: 'array',
                      items: { type: 'string' },
                      description: 'Patterns of import paths to allow requiring from.'
                    },
                    allowAsImport: {
                      type: 'boolean',
                      description: 'Allows `require` statements in import declarations.'
                    }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                noRequireImports: 'A `require()` style import is forbidden.'
              }
            }
          },
          'no-restricted-imports': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow specified modules when loaded by `import`',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-restricted-imports'
              },
              messages: {
                path: "'{{importSource}}' import is restricted from being used.",
                pathWithCustomMessage: "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                patterns: "'{{importSource}}' import is restricted from being used by a pattern.",
                patternWithCustomMessage: "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
                patternAndImportName: "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
                patternAndImportNameWithCustomMessage: "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                patternAndEverything: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
                patternAndEverythingWithRegexImportName: "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
                patternAndEverythingWithCustomMessage: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                patternAndEverythingWithRegexImportNameAndCustomMessage: "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
                everything: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                everythingWithCustomMessage: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                importName: "'{{importName}}' import from '{{importSource}}' is restricted.",
                importNameWithCustomMessage: "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
                allowedImportName: "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
                allowedImportNameWithCustomMessage: "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
                everythingWithAllowImportNames: "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
                everythingWithAllowImportNamesAndCustomMessage: "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
                allowedImportNamePattern: "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
                allowedImportNamePatternWithCustomMessage: "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
                everythingWithAllowedImportNamePattern: "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
                everythingWithAllowedImportNamePatternWithCustomMessage: "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}"
              },
              fixable: undefined,
              schema: {
                anyOf: [
                  {
                    type: 'array',
                    items: {
                      anyOf: [
                        { type: 'string' },
                        {
                          type: 'object',
                          additionalProperties: false,
                          properties: {
                            name: { type: 'string' },
                            message: { type: 'string', minLength: 1 },
                            importNames: {
                              type: 'array',
                              items: { type: 'string' }
                            },
                            allowImportNames: {
                              type: 'array',
                              items: { type: 'string' }
                            },
                            allowTypeImports: {
                              type: 'boolean',
                              description: 'Disallow value imports, but allow type-only imports.'
                            }
                          },
                          required: [ 'name' ]
                        }
                      ]
                    },
                    uniqueItems: true
                  },
                  {
                    type: 'array',
                    items: [
                      {
                        type: 'object',
                        properties: {
                          paths: {
                            type: 'array',
                            items: {
                              anyOf: [
                                { type: 'string' },
                                {
                                  type: 'object',
                                  additionalProperties: false,
                                  properties: {
                                    name: { type: 'string' },
                                    message: { type: 'string', minLength: 1 },
                                    importNames: {
                                      type: 'array',
                                      items: { type: 'string' }
                                    },
                                    allowImportNames: {
                                      type: 'array',
                                      items: { type: 'string' }
                                    },
                                    allowTypeImports: {
                                      type: 'boolean',
                                      description: 'Disallow value imports, but allow type-only imports.'
                                    }
                                  },
                                  required: [ 'name' ]
                                }
                              ]
                            },
                            uniqueItems: true
                          },
                          patterns: {
                            anyOf: [
                              {
                                type: 'array',
                                items: { type: 'string' },
                                uniqueItems: true
                              },
                              {
                                type: 'array',
                                items: {
                                  type: 'object',
                                  additionalProperties: false,
                                  properties: {
                                    importNames: {
                                      type: 'array',
                                      items: { type: 'string' },
                                      minItems: 1,
                                      uniqueItems: true
                                    },
                                    allowImportNames: {
                                      type: 'array',
                                      items: { type: 'string' },
                                      minItems: 1,
                                      uniqueItems: true
                                    },
                                    group: {
                                      type: 'array',
                                      items: { type: 'string' },
                                      minItems: 1,
                                      uniqueItems: true
                                    },
                                    importNamePattern: { type: 'string' },
                                    allowImportNamePattern: { type: 'string' },
                                    message: { type: 'string', minLength: 1 },
                                    caseSensitive: { type: 'boolean' },
                                    allowTypeImports: {
                                      type: 'boolean',
                                      description: 'Disallow value imports, but allow type-only imports.'
                                    }
                                  },
                                  required: [ 'group' ]
                                },
                                uniqueItems: true
                              }
                            ]
                          }
                        },
                        additionalProperties: false
                      }
                    ],
                    additionalItems: false
                  }
                ]
              }
            }
          },
          'no-shadow': {
            create: [Function: create],
            defaultOptions: [
              {
                allow: [],
                builtinGlobals: false,
                hoist: 'functions',
                ignoreOnInitialization: false,
                ignoreTypeValueShadow: true,
                ignoreFunctionTypeParameterNameValueShadow: true
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow variable declarations from shadowing variables declared in the outer scope',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-shadow'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    builtinGlobals: { type: 'boolean' },
                    hoist: {
                      type: 'string',
                      enum: [ 'all', 'functions', 'never' ]
                    },
                    allow: { type: 'array', items: { type: 'string' } },
                    ignoreOnInitialization: { type: 'boolean' },
                    ignoreTypeValueShadow: { type: 'boolean' },
                    ignoreFunctionTypeParameterNameValueShadow: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                noShadow: "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
                noShadowGlobal: "'{{name}}' is already a global variable."
              }
            }
          },
          'no-this-alias': {
            create: [Function: create],
            defaultOptions: [ { allowDestructuring: true, allowedNames: [] } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow aliasing `this`',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-this-alias'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    allowDestructuring: {
                      description: 'Whether to ignore destructurings, such as `const { props, state } = this`.',
                      type: 'boolean'
                    },
                    allowedNames: {
                      description: 'Names to ignore, such as ["self"] for `const self = this;`.',
                      type: 'array',
                      items: { type: 'string' }
                    }
                  }
                }
              ],
              messages: {
                thisAssignment: "Unexpected aliasing of 'this' to local variable.",
                thisDestructure: "Unexpected aliasing of members of 'this' to local variables."
              }
            }
          },
          'no-type-alias': {
            create: [Function: create],
            defaultOptions: [
              {
                allowAliases: 'never',
                allowCallbacks: 'never',
                allowConditionalTypes: 'never',
                allowConstructors: 'never',
                allowLiterals: 'never',
                allowMappedTypes: 'never',
                allowTupleTypes: 'never',
                allowGenerics: 'never'
              }
            ],
            meta: {
              deprecated: true,
              type: 'suggestion',
              docs: {
                description: 'Disallow type aliases',
                url: 'https://typescript-eslint.io/rules/no-type-alias'
              },
              messages: {
                noTypeAlias: 'Type {{alias}} are not allowed.',
                noCompositionAlias: '{{typeName}} in {{compositionType}} types are not allowed.'
              },
              schema: [
                {
                  '$defs': {
                    expandedOptions: {
                      type: 'string',
                      enum: [
                        'always',
                        'never',
                        'in-unions',
                        'in-intersections',
                        'in-unions-and-intersections'
                      ]
                    },
                    simpleOptions: { type: 'string', enum: [ 'always', 'never' ] }
                  },
                  type: 'object',
                  properties: {
                    allowAliases: {
                      description: 'Whether to allow direct one-to-one type aliases.',
                      '$ref': '#/items/0/$defs/expandedOptions'
                    },
                    allowCallbacks: {
                      description: 'Whether to allow type aliases for callbacks.',
                      '$ref': '#/items/0/$defs/simpleOptions'
                    },
                    allowConditionalTypes: {
                      description: 'Whether to allow type aliases for conditional types.',
                      '$ref': '#/items/0/$defs/simpleOptions'
                    },
                    allowConstructors: {
                      description: 'Whether to allow type aliases with constructors.',
                      '$ref': '#/items/0/$defs/simpleOptions'
                    },
                    allowLiterals: {
                      description: 'Whether to allow type aliases with object literal types.',
                      '$ref': '#/items/0/$defs/expandedOptions'
                    },
                    allowMappedTypes: {
                      description: 'Whether to allow type aliases with mapped types.',
                      '$ref': '#/items/0/$defs/expandedOptions'
                    },
                    allowTupleTypes: {
                      description: 'Whether to allow type aliases with tuple types.',
                      '$ref': '#/items/0/$defs/expandedOptions'
                    },
                    allowGenerics: {
                      description: 'Whether to allow type aliases with generic types.',
                      '$ref': '#/items/0/$defs/simpleOptions'
                    }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'no-unnecessary-boolean-literal-compare': {
            create: [Function: create],
            defaultOptions: [
              {
                allowComparingNullableBooleansToTrue: true,
                allowComparingNullableBooleansToFalse: true
              }
            ],
            meta: {
              docs: {
                description: 'Disallow unnecessary equality comparisons against boolean literals',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare'
              },
              fixable: 'code',
              messages: {
                direct: 'This expression unnecessarily compares a boolean value to a boolean instead of using it directly.',
                negated: 'This expression unnecessarily compares a boolean value to a boolean instead of negating it.',
                comparingNullableToTrueDirect: 'This expression unnecessarily compares a nullable boolean value to true instead of using it directly.',
                comparingNullableToTrueNegated: 'This expression unnecessarily compares a nullable boolean value to true instead of negating it.',
                comparingNullableToFalse: 'This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowComparingNullableBooleansToTrue: {
                      description: 'Whether to allow comparisons between nullable boolean variables and `true`.',
                      type: 'boolean'
                    },
                    allowComparingNullableBooleansToFalse: {
                      description: 'Whether to allow comparisons between nullable boolean variables and `false`.',
                      type: 'boolean'
                    }
                  },
                  additionalProperties: false
                }
              ],
              type: 'suggestion'
            }
          },
          'no-unnecessary-condition': {
            create: [Function: create],
            defaultOptions: [
              {
                allowConstantLoopConditions: false,
                allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow conditionals where the type is always truthy or always falsy',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unnecessary-condition'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowConstantLoopConditions: {
                      description: 'Whether to ignore constant loop conditions, such as `while (true)`.',
                      type: 'boolean'
                    },
                    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: {
                      description: 'Whether to not error when running with a tsconfig that has strictNullChecks turned.',
                      type: 'boolean'
                    }
                  },
                  additionalProperties: false
                }
              ],
              fixable: 'code',
              messages: {
                alwaysTruthy: 'Unnecessary conditional, value is always truthy.',
                alwaysFalsy: 'Unnecessary conditional, value is always falsy.',
                alwaysTruthyFunc: 'This callback should return a conditional, but return is always truthy.',
                alwaysFalsyFunc: 'This callback should return a conditional, but return is always falsy.',
                neverNullish: 'Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.',
                alwaysNullish: 'Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.',
                literalBooleanExpression: 'Unnecessary conditional, both sides of the expression are literal values.',
                noOverlapBooleanExpression: 'Unnecessary conditional, the types have no overlap.',
                never: 'Unnecessary conditional, value is `never`.',
                neverOptionalChain: 'Unnecessary optional chain on a non-nullish value.',
                noStrictNullCheck: 'This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.'
              }
            }
          },
          'no-unnecessary-qualifier': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow unnecessary namespace qualifiers',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unnecessary-qualifier'
              },
              fixable: 'code',
              messages: {
                unnecessaryQualifier: "Qualifier is unnecessary since '{{ name }}' is in scope."
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'no-unnecessary-template-expression': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              fixable: 'code',
              type: 'suggestion',
              docs: {
                description: 'Disallow unnecessary template expressions',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unnecessary-template-expression'
              },
              messages: {
                noUnnecessaryTemplateExpression: 'Template literal expression is unnecessary and can be simplified.'
              },
              schema: []
            }
          },
          'no-unnecessary-type-arguments': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow type arguments that are equal to the default',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unnecessary-type-arguments'
              },
              fixable: 'code',
              messages: {
                unnecessaryTypeParameter: 'This is the default value for this type parameter, so it can be omitted.'
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'no-unnecessary-type-assertion': {
            create: [Function: create],
            defaultOptions: [ {} ],
            meta: {
              docs: {
                description: 'Disallow type assertions that do not change the type of an expression',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unnecessary-type-assertion'
              },
              fixable: 'code',
              messages: {
                unnecessaryAssertion: 'This assertion is unnecessary since it does not change the type of the expression.',
                contextuallyUnnecessary: 'This assertion is unnecessary since the receiver accepts the original type of the expression.'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    typesToIgnore: {
                      description: 'A list of type names to ignore.',
                      type: 'array',
                      items: { type: 'string' }
                    }
                  }
                }
              ],
              type: 'suggestion'
            }
          },
          'no-unnecessary-type-constraint': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Disallow unnecessary constraints on generic types',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-unnecessary-type-constraint'
              },
              hasSuggestions: true,
              messages: {
                unnecessaryConstraint: 'Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.',
                removeUnnecessaryConstraint: 'Remove the unnecessary `{{constraint}}` constraint.'
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'no-unsafe-argument': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow calling a function with a value with type `any`',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unsafe-argument'
              },
              messages: {
                unsafeArgument: 'Unsafe argument of type `{{sender}}` assigned to a parameter of type `{{receiver}}`.',
                unsafeTupleSpread: 'Unsafe spread of a tuple type. The argument is of type `{{sender}}` and is assigned to a parameter of type `{{receiver}}`.',
                unsafeArraySpread: 'Unsafe spread of an `any` array type.',
                unsafeSpread: 'Unsafe spread of an `any` type.'
              },
              schema: []
            }
          },
          'no-unsafe-assignment': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow assigning a value with type `any` to variables and properties',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unsafe-assignment'
              },
              messages: {
                anyAssignment: 'Unsafe assignment of an {{sender}} value.',
                anyAssignmentThis: 'Unsafe assignment of an {{sender}} value. `this` is typed as `any`.\n' +
                  'You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.',
                unsafeArrayPattern: 'Unsafe array destructuring of an {{sender}} array value.',
                unsafeArrayPatternFromTuple: 'Unsafe array destructuring of a tuple element with an {{sender}} value.',
                unsafeAssignment: 'Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.',
                unsafeArraySpread: 'Unsafe spread of an {{sender}} value in an array.'
              },
              schema: []
            }
          },
          'no-unsafe-call': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow calling a value with type `any`',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unsafe-call'
              },
              messages: {
                unsafeCall: 'Unsafe call of an `any` typed value.',
                unsafeCallThis: 'Unsafe call of an `any` typed value. `this` is typed as `any`.\n' +
                  'You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.',
                unsafeNew: 'Unsafe construction of an any type value.',
                unsafeTemplateTag: 'Unsafe any typed template tag.'
              },
              schema: []
            }
          },
          'no-unsafe-declaration-merging': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow unsafe declaration merging',
                recommended: 'recommended',
                requiresTypeChecking: false,
                url: 'https://typescript-eslint.io/rules/no-unsafe-declaration-merging'
              },
              messages: {
                unsafeMerging: 'Unsafe declaration merging between classes and interfaces.'
              },
              schema: []
            }
          },
          'no-unsafe-enum-comparison': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              hasSuggestions: true,
              type: 'suggestion',
              docs: {
                description: 'Disallow comparing an enum value with a non-enum value',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unsafe-enum-comparison'
              },
              messages: {
                mismatchedCase: 'The case statement does not have a shared enum type with the switch predicate.',
                mismatchedCondition: 'The two values in this comparison do not have a shared enum type.',
                replaceValueWithEnum: 'Replace with an enum value comparison.'
              },
              schema: []
            }
          },
          'no-unsafe-member-access': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow member access on a value with type `any`',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unsafe-member-access'
              },
              messages: {
                unsafeMemberExpression: 'Unsafe member access {{property}} on an `any` value.',
                unsafeThisMemberExpression: 'Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.\n' +
                  'You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.',
                unsafeComputedMemberAccess: 'Computed name {{property}} resolves to an any value.'
              },
              schema: []
            }
          },
          'no-unsafe-return': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow returning a value with type `any` from a function',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unsafe-return'
              },
              messages: {
                unsafeReturn: 'Unsafe return of an `{{type}}` typed value.',
                unsafeReturnThis: 'Unsafe return of an `{{type}}` typed value. `this` is typed as `any`.\n' +
                  'You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.',
                unsafeReturnAssignment: 'Unsafe return of type `{{sender}}` from function with return type `{{receiver}}`.'
              },
              schema: []
            }
          },
          'no-unsafe-unary-minus': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Require unary negation to take a number',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/no-unsafe-unary-minus'
              },
              messages: {
                unaryMinus: 'Argument of unary negation should be assignable to number | bigint but is {{type}} instead.'
              },
              schema: []
            }
          },
          'no-unused-expressions': {
            create: [Function: create],
            defaultOptions: [
              {
                allowShortCircuit: false,
                allowTernary: false,
                allowTaggedTemplates: false
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow unused expressions',
                extendsBaseRule: true,
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/no-unused-expressions'
              },
              hasSuggestions: undefined,
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowShortCircuit: { type: 'boolean', default: false },
                    allowTernary: { type: 'boolean', default: false },
                    allowTaggedTemplates: { type: 'boolean', default: false },
                    enforceForJSX: { type: 'boolean', default: false }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                unusedExpression: 'Expected an assignment or function call and instead saw an expression.'
              }
            }
          },
          'no-unused-vars': {
            create: [Function: create],
            defaultOptions: [ {} ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow unused variables',
                recommended: 'recommended',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-unused-vars'
              },
              schema: [
                {
                  oneOf: [
                    { type: 'string', enum: [ 'all', 'local' ] },
                    {
                      type: 'object',
                      properties: {
                        vars: { type: 'string', enum: [ 'all', 'local' ] },
                        varsIgnorePattern: { type: 'string' },
                        args: {
                          type: 'string',
                          enum: [ 'all', 'after-used', 'none' ]
                        },
                        ignoreRestSiblings: { type: 'boolean' },
                        argsIgnorePattern: { type: 'string' },
                        caughtErrors: { type: 'string', enum: [ 'all', 'none' ] },
                        caughtErrorsIgnorePattern: { type: 'string' },
                        destructuredArrayIgnorePattern: { type: 'string' }
                      },
                      additionalProperties: false
                    }
                  ]
                }
              ],
              messages: {
                unusedVar: "'{{varName}}' is {{action}} but never used{{additional}}."
              }
            }
          },
          'no-use-before-define': {
            create: [Function: create],
            defaultOptions: [
              {
                functions: true,
                classes: true,
                enums: true,
                variables: true,
                typedefs: true,
                ignoreTypeReferences: true,
                allowNamedExports: false
              }
            ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow the use of variables before they are defined',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-use-before-define'
              },
              messages: {
                noUseBeforeDefine: "'{{name}}' was used before it was defined."
              },
              schema: [
                {
                  oneOf: [
                    { type: 'string', enum: [ 'nofunc' ] },
                    {
                      type: 'object',
                      properties: {
                        functions: { type: 'boolean' },
                        classes: { type: 'boolean' },
                        enums: { type: 'boolean' },
                        variables: { type: 'boolean' },
                        typedefs: { type: 'boolean' },
                        ignoreTypeReferences: { type: 'boolean' },
                        allowNamedExports: { type: 'boolean' }
                      },
                      additionalProperties: false
                    }
                  ]
                }
              ]
            }
          },
          'no-useless-constructor': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow unnecessary constructors',
                recommended: 'strict',
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/no-useless-constructor'
              },
              hasSuggestions: undefined,
              schema: [],
              messages: { noUselessConstructor: 'Useless constructor.' }
            }
          },
          'no-useless-empty-export': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: "Disallow empty exports that don't change anything in a module file",
                url: 'https://typescript-eslint.io/rules/no-useless-empty-export'
              },
              fixable: 'code',
              hasSuggestions: false,
              messages: {
                uselessExport: 'Empty export does nothing and can be removed.'
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'no-var-requires': {
            create: [Function: create],
            defaultOptions: [ { allow: [] } ],
            meta: {
              deprecated: true,
              replacedBy: [ '@typescript-eslint/no-require-imports' ],
              type: 'problem',
              docs: {
                description: 'Disallow `require` statements except in import statements',
                url: 'https://typescript-eslint.io/rules/no-var-requires'
              },
              messages: {
                noVarReqs: 'Require statement not part of import statement.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allow: {
                      type: 'array',
                      items: { type: 'string' },
                      description: 'Patterns of import paths to allow requiring from.'
                    }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'non-nullable-type-assertion-style': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Enforce non-null assertions over explicit type casts',
                recommended: 'stylistic',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/non-nullable-type-assertion-style'
              },
              fixable: 'code',
              messages: {
                preferNonNullAssertion: 'Use a ! assertion to more succinctly remove null and undefined from the type.'
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'only-throw-error': {
            create: [Function: create],
            defaultOptions: [ { allowThrowingAny: true, allowThrowingUnknown: true } ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Disallow throwing non-`Error` values as exceptions',
                recommended: 'recommended',
                extendsBaseRule: 'no-throw-literal',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/only-throw-error'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowThrowingAny: { type: 'boolean' },
                    allowThrowingUnknown: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                object: 'Expected an error object to be thrown.',
                undef: 'Do not throw undefined.'
              }
            }
          },
          'parameter-properties': {
            create: [Function: create],
            defaultOptions: [ { allow: [], prefer: 'class-property' } ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Require or disallow parameter properties in class constructors',
                url: 'https://typescript-eslint.io/rules/parameter-properties'
              },
              messages: {
                preferClassProperty: 'Property {{parameter}} should be declared as a class property.',
                preferParameterProperty: 'Property {{parameter}} should be declared as a parameter property.'
              },
              schema: [
                {
                  '$defs': {
                    modifier: {
                      type: 'string',
                      enum: [
                        'readonly',
                        'private',
                        'protected',
                        'public',
                        'private readonly',
                        'protected readonly',
                        'public readonly'
                      ]
                    }
                  },
                  type: 'object',
                  properties: {
                    allow: {
                      type: 'array',
                      items: { '$ref': '#/items/0/$defs/modifier' }
                    },
                    prefer: {
                      type: 'string',
                      enum: [ 'class-property', 'parameter-property' ]
                    }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'prefer-as-const': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce the use of `as const` over literal type',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/prefer-as-const'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                preferConstAssertion: 'Expected a `const` instead of a literal type assertion.',
                variableConstAssertion: 'Expected a `const` assertion instead of a literal type annotation.',
                variableSuggest: 'You should use `as const` instead of type annotation.'
              },
              schema: []
            }
          },
          'prefer-destructuring': {
            create: [Function: create],
            defaultOptions: [
              {
                VariableDeclarator: { array: true, object: true },
                AssignmentExpression: { array: true, object: true }
              },
              {}
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require destructuring from arrays and/or objects',
                extendsBaseRule: true,
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-destructuring'
              },
              schema: [
                {
                  oneOf: [
                    {
                      type: 'object',
                      properties: {
                        VariableDeclarator: {
                          type: 'object',
                          properties: {
                            array: { type: 'boolean' },
                            object: { type: 'boolean' }
                          },
                          additionalProperties: false
                        },
                        AssignmentExpression: {
                          type: 'object',
                          properties: {
                            array: { type: 'boolean' },
                            object: { type: 'boolean' }
                          },
                          additionalProperties: false
                        }
                      },
                      additionalProperties: false
                    },
                    {
                      type: 'object',
                      properties: {
                        array: { type: 'boolean' },
                        object: { type: 'boolean' }
                      },
                      additionalProperties: false
                    }
                  ]
                },
                {
                  type: 'object',
                  properties: {
                    enforceForRenamedProperties: { type: 'boolean' },
                    enforceForDeclarationWithTypeAnnotation: { type: 'boolean' }
                  }
                }
              ],
              fixable: 'code',
              hasSuggestions: undefined,
              messages: { preferDestructuring: 'Use {{type}} destructuring.' }
            }
          },
          'prefer-enum-initializers': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require each enum member value to be explicitly initialized',
                url: 'https://typescript-eslint.io/rules/prefer-enum-initializers'
              },
              hasSuggestions: true,
              messages: {
                defineInitializer: "The value of the member '{{ name }}' should be explicitly defined.",
                defineInitializerSuggestion: 'Can be fixed to {{ name }} = {{ suggested }}'
              },
              schema: []
            }
          },
          'prefer-find': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result',
                recommended: 'stylistic',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-find'
              },
              messages: {
                preferFind: 'Prefer .find(...) instead of .filter(...)[0].',
                preferFindSuggestion: 'Use .find(...) instead of .filter(...)[0].'
              },
              schema: [],
              type: 'suggestion',
              hasSuggestions: true
            }
          },
          'prefer-for-of': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce the use of `for-of` loop over the standard `for` loop where possible',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/prefer-for-of'
              },
              messages: {
                preferForOf: 'Expected a `for-of` loop instead of a `for` loop with this simple iteration.'
              },
              schema: []
            }
          },
          'prefer-function-type': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Enforce using function types instead of interfaces with call signatures',
                recommended: 'stylistic',
                url: 'https://typescript-eslint.io/rules/prefer-function-type'
              },
              fixable: 'code',
              messages: {
                functionTypeOverCallableType: '{{ literalOrInterface }} only has a call signature, you should use a function type instead.',
                unexpectedThisOnFunctionOnlyInterface: "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?"
              },
              schema: [],
              type: 'suggestion'
            }
          },
          'prefer-includes': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce `includes` method over `indexOf` method',
                recommended: 'stylistic',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-includes'
              },
              fixable: 'code',
              messages: {
                preferIncludes: "Use 'includes()' method instead.",
                preferStringIncludes: 'Use `String#includes()` method with a string instead.'
              },
              schema: []
            }
          },
          'prefer-literal-enum-member': {
            create: [Function: create],
            defaultOptions: [ { allowBitwiseExpressions: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require all enum members to be literal values',
                recommended: 'strict',
                requiresTypeChecking: false,
                url: 'https://typescript-eslint.io/rules/prefer-literal-enum-member'
              },
              messages: {
                notLiteral: 'Explicit enum value must only be a literal value (string, number, boolean, etc).'
              },
              schema: [
                {
                  type: 'object',
                  properties: { allowBitwiseExpressions: { type: 'boolean' } },
                  additionalProperties: false
                }
              ]
            }
          },
          'prefer-namespace-keyword': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/prefer-namespace-keyword'
              },
              fixable: 'code',
              messages: {
                useNamespace: "Use 'namespace' instead of 'module' to declare custom TypeScript modules."
              },
              schema: []
            }
          },
          'prefer-nullish-coalescing': {
            create: [Function: create],
            defaultOptions: [
              {
                allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,
                ignoreConditionalTests: true,
                ignoreTernaryTests: false,
                ignoreMixedLogicalExpressions: false,
                ignorePrimitives: {
                  bigint: false,
                  boolean: false,
                  number: false,
                  string: false
                }
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce using the nullish coalescing operator instead of logical assignments or chaining',
                recommended: 'stylistic',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-nullish-coalescing'
              },
              hasSuggestions: true,
              messages: {
                preferNullishOverOr: 'Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.',
                preferNullishOverTernary: 'Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.',
                suggestNullish: 'Fix to nullish coalescing operator (`??`).',
                noStrictNullCheck: 'This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: { type: 'boolean' },
                    ignoreConditionalTests: { type: 'boolean' },
                    ignoreMixedLogicalExpressions: { type: 'boolean' },
                    ignorePrimitives: {
                      oneOf: [
                        {
                          type: 'object',
                          properties: {
                            bigint: { type: 'boolean' },
                            boolean: { type: 'boolean' },
                            number: { type: 'boolean' },
                            string: { type: 'boolean' }
                          }
                        },
                        { type: 'boolean', enum: [ true ] }
                      ]
                    },
                    ignoreTernaryTests: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'prefer-optional-chain': {
            create: [Function: create],
            defaultOptions: [
              {
                checkAny: true,
                checkUnknown: true,
                checkString: true,
                checkNumber: true,
                checkBoolean: true,
                checkBigInt: true,
                requireNullish: false,
                allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing: false
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects',
                recommended: 'stylistic',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-optional-chain'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                preferOptionalChain: "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
                optionalChainSuggest: 'Change to an optional chain.'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    checkAny: {
                      type: 'boolean',
                      description: 'Check operands that are typed as `any` when inspecting "loose boolean" operands.'
                    },
                    checkUnknown: {
                      type: 'boolean',
                      description: 'Check operands that are typed as `unknown` when inspecting "loose boolean" operands.'
                    },
                    checkString: {
                      type: 'boolean',
                      description: 'Check operands that are typed as `string` when inspecting "loose boolean" operands.'
                    },
                    checkNumber: {
                      type: 'boolean',
                      description: 'Check operands that are typed as `number` when inspecting "loose boolean" operands.'
                    },
                    checkBoolean: {
                      type: 'boolean',
                      description: 'Check operands that are typed as `boolean` when inspecting "loose boolean" operands.'
                    },
                    checkBigInt: {
                      type: 'boolean',
                      description: 'Check operands that are typed as `bigint` when inspecting "loose boolean" operands.'
                    },
                    requireNullish: {
                      type: 'boolean',
                      description: 'Skip operands that are not typed with `null` and/or `undefined` when inspecting "loose boolean" operands.'
                    },
                    allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing: {
                      type: 'boolean',
                      description: 'Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.'
                    }
                  }
                }
              ]
            }
          },
          'prefer-promise-reject-errors': {
            create: [Function: create],
            defaultOptions: [ { allowEmptyReject: false } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require using Error objects as Promise rejection reasons',
                recommended: 'recommended',
                extendsBaseRule: true,
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-promise-reject-errors'
              },
              schema: [
                {
                  type: 'object',
                  properties: { allowEmptyReject: { type: 'boolean' } },
                  additionalProperties: false
                }
              ],
              messages: {
                rejectAnError: 'Expected the Promise rejection reason to be an Error.'
              }
            }
          },
          'prefer-readonly': {
            create: [Function: create],
            defaultOptions: [ { onlyInlineLambdas: false } ],
            meta: {
              docs: {
                description: "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-readonly'
              },
              fixable: 'code',
              messages: {
                preferReadonly: "Member '{{name}}' is never reassigned; mark it as `readonly`."
              },
              schema: [
                {
                  additionalProperties: false,
                  properties: { onlyInlineLambdas: { type: 'boolean' } },
                  type: 'object'
                }
              ],
              type: 'suggestion'
            }
          },
          'prefer-readonly-parameter-types': {
            create: [Function: create],
            defaultOptions: [
              {
                allow: [],
                checkParameterProperties: true,
                ignoreInferredTypes: false,
                treatMethodsAsReadonly: false
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-readonly-parameter-types'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    allow: {
                      type: 'array',
                      items: {
                        oneOf: [
                          { type: 'string' },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'file' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              },
                              path: { type: 'string' }
                            },
                            required: [ 'from', 'name' ]
                          },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'lib' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              }
                            },
                            required: [ 'from', 'name' ]
                          },
                          {
                            type: 'object',
                            additionalProperties: false,
                            properties: {
                              from: { type: 'string', enum: [ 'package' ] },
                              name: {
                                oneOf: [
                                  { type: 'string' },
                                  {
                                    type: 'array',
                                    minItems: 1,
                                    uniqueItems: true,
                                    items: { type: 'string' }
                                  }
                                ]
                              },
                              package: { type: 'string' }
                            },
                            required: [ 'from', 'name', 'package' ]
                          }
                        ]
                      }
                    },
                    checkParameterProperties: { type: 'boolean' },
                    ignoreInferredTypes: { type: 'boolean' },
                    treatMethodsAsReadonly: { type: 'boolean' }
                  }
                }
              ],
              messages: {
                shouldBeReadonly: 'Parameter should be a read only type.'
              }
            }
          },
          'prefer-reduce-type-parameter': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              docs: {
                description: 'Enforce using type parameter when calling `Array#reduce` instead of casting',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-reduce-type-parameter'
              },
              messages: {
                preferTypeParameter: 'Unnecessary cast: Array#reduce accepts a type parameter for the default value.'
              },
              fixable: 'code',
              schema: []
            }
          },
          'prefer-regexp-exec': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              fixable: 'code',
              docs: {
                description: 'Enforce `RegExp#exec` over `String#match` if no global flag is provided',
                recommended: 'stylistic',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-regexp-exec'
              },
              messages: {
                regExpExecOverStringMatch: 'Use the `RegExp#exec()` method instead.'
              },
              schema: []
            }
          },
          'prefer-return-this-type': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce that `this` is used when only `this` type is returned',
                recommended: 'strict',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-return-this-type'
              },
              messages: { useThisType: 'Use `this` type instead.' },
              schema: [],
              fixable: 'code'
            }
          },
          'prefer-string-starts-ends-with': {
            create: [Function: create],
            defaultOptions: [ { allowSingleElementEquality: 'never' } ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings',
                recommended: 'stylistic',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/prefer-string-starts-ends-with'
              },
              messages: {
                preferStartsWith: "Use 'String#startsWith' method instead.",
                preferEndsWith: "Use the 'String#endsWith' method instead."
              },
              schema: [
                {
                  additionalProperties: false,
                  properties: {
                    allowSingleElementEquality: {
                      description: 'Whether to allow equality checks against the first or last element of a string.',
                      enum: [ 'always', 'never' ],
                      type: 'string'
                    }
                  },
                  type: 'object'
                }
              ],
              fixable: 'code'
            }
          },
          'prefer-ts-expect-error': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'problem',
              deprecated: true,
              replacedBy: [ '@typescript-eslint/ban-ts-comment' ],
              docs: {
                description: 'Enforce using `@ts-expect-error` over `@ts-ignore`',
                url: 'https://typescript-eslint.io/rules/prefer-ts-expect-error'
              },
              fixable: 'code',
              messages: {
                preferExpectErrorComment: 'Use "@ts-expect-error" to ensure an error is actually being suppressed.'
              },
              schema: []
            }
          },
          'promise-function-async': {
            create: [Function: create],
            defaultOptions: [
              {
                allowAny: true,
                allowedPromiseNames: [],
                checkArrowFunctions: true,
                checkFunctionDeclarations: true,
                checkFunctionExpressions: true,
                checkMethodDeclarations: true
              }
            ],
            meta: {
              type: 'suggestion',
              fixable: 'code',
              docs: {
                description: 'Require any function or method that returns a Promise to be marked async',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/promise-function-async'
              },
              messages: {
                missingAsync: 'Functions that return promises must be async.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowAny: {
                      description: 'Whether to consider `any` and `unknown` to be Promises.',
                      type: 'boolean'
                    },
                    allowedPromiseNames: {
                      description: 'Any extra names of classes or interfaces to be considered Promises.',
                      type: 'array',
                      items: { type: 'string' }
                    },
                    checkArrowFunctions: { type: 'boolean' },
                    checkFunctionDeclarations: { type: 'boolean' },
                    checkFunctionExpressions: { type: 'boolean' },
                    checkMethodDeclarations: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          'require-array-sort-compare': {
            create: [Function: create],
            defaultOptions: [ { ignoreStringArrays: true } ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/require-array-sort-compare'
              },
              messages: { requireCompare: "Require 'compare' argument." },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    ignoreStringArrays: {
                      description: 'Whether to ignore arrays in which all elements are strings.',
                      type: 'boolean'
                    }
                  }
                }
              ]
            }
          },
          'require-await': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow async functions which do not return promises and have no `await` expression',
                recommended: 'recommended',
                requiresTypeChecking: true,
                extendsBaseRule: true,
                url: 'https://typescript-eslint.io/rules/require-await'
              },
              schema: [],
              messages: { missingAwait: "{{name}} has no 'await' expression." }
            }
          },
          'restrict-plus-operands': {
            create: [Function: create],
            defaultOptions: [
              {
                allowAny: true,
                allowBoolean: true,
                allowNullish: true,
                allowNumberAndString: true,
                allowRegExp: true,
                skipCompoundAssignments: false
              }
            ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Require both operands of addition to be the same type and be `bigint`, `number`, or `string`',
                recommended: {
                  recommended: true,
                  strict: [
                    {
                      allowAny: false,
                      allowBoolean: false,
                      allowNullish: false,
                      allowNumberAndString: false,
                      allowRegExp: false
                    }
                  ]
                },
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/restrict-plus-operands'
              },
              messages: {
                bigintAndNumber: "Numeric '+' operations must either be both bigints or both numbers. Got `{{left}}` + `{{right}}`.",
                invalid: "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got `{{type}}`.",
                mismatched: "Operands of '+' operations must be a number or {{stringLike}}. Got `{{left}}` + `{{right}}`."
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    allowAny: {
                      description: 'Whether to allow `any` typed values.',
                      type: 'boolean'
                    },
                    allowBoolean: {
                      description: 'Whether to allow `boolean` typed values.',
                      type: 'boolean'
                    },
                    allowNullish: {
                      description: 'Whether to allow potentially `null` or `undefined` typed values.',
                      type: 'boolean'
                    },
                    allowNumberAndString: {
                      description: 'Whether to allow `bigint`/`number` typed values and `string` typed values to be added together.',
                      type: 'boolean'
                    },
                    allowRegExp: {
                      description: 'Whether to allow `regexp` typed values.',
                      type: 'boolean'
                    },
                    skipCompoundAssignments: {
                      description: 'Whether to skip compound assignments such as `+=`.',
                      type: 'boolean'
                    }
                  }
                }
              ]
            }
          },
          'restrict-template-expressions': {
            create: [Function: create],
            defaultOptions: [
              {
                allowAny: true,
                allowBoolean: true,
                allowNullish: true,
                allowNumber: true,
                allowRegExp: true
              }
            ],
            meta: {
              type: 'problem',
              docs: {
                description: 'Enforce template literal expressions to be of `string` type',
                recommended: {
                  recommended: true,
                  strict: [
                    {
                      allowAny: false,
                      allowBoolean: false,
                      allowNullish: false,
                      allowNumber: false,
                      allowRegExp: false,
                      allowNever: false
                    }
                  ]
                },
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/restrict-template-expressions'
              },
              messages: {
                invalidType: 'Invalid type "{{type}}" of template literal expression.'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    allowAny: {
                      description: 'Whether to allow `any` typed values in template expressions.',
                      type: 'boolean'
                    },
                    allowArray: {
                      description: 'Whether to allow `array` typed values in template expressions.',
                      type: 'boolean'
                    },
                    allowBoolean: {
                      description: 'Whether to allow `boolean` typed values in template expressions.',
                      type: 'boolean'
                    },
                    allowNullish: {
                      description: 'Whether to allow `nullish` typed values in template expressions.',
                      type: 'boolean'
                    },
                    allowNumber: {
                      description: 'Whether to allow `number` typed values in template expressions.',
                      type: 'boolean'
                    },
                    allowRegExp: {
                      description: 'Whether to allow `regexp` typed values in template expressions.',
                      type: 'boolean'
                    },
                    allowNever: {
                      description: 'Whether to allow `never` typed values in template expressions.',
                      type: 'boolean'
                    }
                  }
                }
              ]
            }
          },
          'return-await': {
            create: [Function: create],
            defaultOptions: [ 'in-try-catch' ],
            meta: {
              docs: {
                description: 'Enforce consistent returning of awaited values',
                requiresTypeChecking: true,
                extendsBaseRule: 'no-return-await',
                url: 'https://typescript-eslint.io/rules/return-await'
              },
              fixable: 'code',
              hasSuggestions: true,
              type: 'problem',
              messages: {
                nonPromiseAwait: 'Returning an awaited value that is not a promise is not allowed.',
                disallowedPromiseAwait: 'Returning an awaited promise is not allowed in this context.',
                requiredPromiseAwait: 'Returning an awaited promise is required in this context.',
                requiredPromiseAwaitSuggestion: 'Add `await` before the expression. Use caution as this may impact control flow.',
                disallowedPromiseAwaitSuggestion: 'Remove `await` before the expression. Use caution as this may impact control flow.'
              },
              schema: [
                {
                  type: 'string',
                  enum: [ 'in-try-catch', 'always', 'never' ]
                }
              ]
            }
          },
          'sort-type-constituents': {
            create: [Function: create],
            defaultOptions: [
              {
                checkIntersections: true,
                checkUnions: true,
                caseSensitive: false,
                groupOrder: [
                  'named',       'keyword',
                  'operator',    'literal',
                  'function',    'import',
                  'conditional', 'object',
                  'tuple',       'intersection',
                  'union',       'nullish'
                ]
              }
            ],
            meta: {
              deprecated: true,
              replacedBy: [
                'perfectionist/sort-intersection-types',
                'perfectionist/sort-union-types'
              ],
              type: 'suggestion',
              docs: {
                description: 'Enforce constituents of a type union/intersection to be sorted alphabetically',
                url: 'https://typescript-eslint.io/rules/sort-type-constituents'
              },
              fixable: 'code',
              hasSuggestions: true,
              messages: {
                notSorted: '{{type}} type constituents must be sorted.',
                notSortedNamed: '{{type}} type {{name}} constituents must be sorted.',
                suggestFix: 'Sort constituents of type (removes all comments).'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    checkIntersections: {
                      description: 'Whether to check intersection types.',
                      type: 'boolean'
                    },
                    checkUnions: {
                      description: 'Whether to check union types.',
                      type: 'boolean'
                    },
                    caseSensitive: {
                      description: 'Whether to sort using case sensitive sorting.',
                      type: 'boolean'
                    },
                    groupOrder: {
                      description: 'Ordering of the groups.',
                      type: 'array',
                      items: {
                        type: 'string',
                        enum: [
                          'conditional', 'function',
                          'import',      'intersection',
                          'keyword',     'nullish',
                          'literal',     'named',
                          'object',      'operator',
                          'tuple',       'union'
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          'strict-boolean-expressions': {
            create: [Function: create],
            defaultOptions: [
              {
                allowString: true,
                allowNumber: true,
                allowNullableObject: true,
                allowNullableBoolean: false,
                allowNullableString: false,
                allowNullableNumber: false,
                allowNullableEnum: false,
                allowAny: false,
                allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false
              }
            ],
            meta: {
              type: 'suggestion',
              fixable: 'code',
              hasSuggestions: true,
              docs: {
                description: 'Disallow certain types in boolean expressions',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/strict-boolean-expressions'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowString: { type: 'boolean' },
                    allowNumber: { type: 'boolean' },
                    allowNullableObject: { type: 'boolean' },
                    allowNullableBoolean: { type: 'boolean' },
                    allowNullableString: { type: 'boolean' },
                    allowNullableNumber: { type: 'boolean' },
                    allowNullableEnum: { type: 'boolean' },
                    allowAny: { type: 'boolean' },
                    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: { type: 'boolean' }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                conditionErrorOther: 'Unexpected value in conditional. A boolean expression is required.',
                conditionErrorAny: 'Unexpected any value in conditional. An explicit comparison or type cast is required.',
                conditionErrorNullish: 'Unexpected nullish value in conditional. The condition is always false.',
                conditionErrorNullableBoolean: 'Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.',
                conditionErrorString: 'Unexpected string value in conditional. An explicit empty string check is required.',
                conditionErrorNullableString: 'Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.',
                conditionErrorNumber: 'Unexpected number value in conditional. An explicit zero/NaN check is required.',
                conditionErrorNullableNumber: 'Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.',
                conditionErrorObject: 'Unexpected object value in conditional. The condition is always true.',
                conditionErrorNullableObject: 'Unexpected nullable object value in conditional. An explicit null check is required.',
                conditionErrorNullableEnum: 'Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.',
                noStrictNullCheck: 'This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.',
                conditionFixDefaultFalse: 'Explicitly treat nullish value the same as false (`value ?? false`)',
                conditionFixDefaultEmptyString: 'Explicitly treat nullish value the same as an empty string (`value ?? ""`)',
                conditionFixDefaultZero: 'Explicitly treat nullish value the same as 0 (`value ?? 0`)',
                conditionFixCompareNullish: 'Change condition to check for null/undefined (`value != null`)',
                conditionFixCastBoolean: 'Explicitly cast value to a boolean (`Boolean(value)`)',
                conditionFixCompareTrue: 'Change condition to check if true (`value === true`)',
                conditionFixCompareFalse: 'Change condition to check if false (`value === false`)',
                conditionFixCompareStringLength: "Change condition to check string's length (`value.length !== 0`)",
                conditionFixCompareEmptyString: 'Change condition to check for empty string (`value !== ""`)',
                conditionFixCompareZero: 'Change condition to check for 0 (`value !== 0`)',
                conditionFixCompareNaN: 'Change condition to check for NaN (`!Number.isNaN(value)`)'
              }
            }
          },
          'switch-exhaustiveness-check': {
            create: [Function: create],
            defaultOptions: [
              {
                allowDefaultCaseForExhaustiveSwitch: true,
                requireDefaultForNonUnion: false
              }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Require switch-case statements to be exhaustive',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/switch-exhaustiveness-check'
              },
              hasSuggestions: true,
              schema: [
                {
                  type: 'object',
                  properties: {
                    allowDefaultCaseForExhaustiveSwitch: {
                      description: "If 'true', allow 'default' cases on switch statements with exhaustive cases.",
                      type: 'boolean'
                    },
                    requireDefaultForNonUnion: {
                      description: "If 'true', require a 'default' clause for switches on non-union types.",
                      type: 'boolean'
                    }
                  },
                  additionalProperties: false
                }
              ],
              messages: {
                switchIsNotExhaustive: 'Switch is not exhaustive. Cases not matched: {{missingBranches}}',
                dangerousDefaultCase: 'The switch statement is exhaustive, so the default case is unnecessary.',
                addMissingCases: 'Add branches for missing cases.'
              }
            }
          },
          'triple-slash-reference': {
            create: [Function: create],
            defaultOptions: [
              { lib: 'always', path: 'never', types: 'prefer-import' }
            ],
            meta: {
              type: 'suggestion',
              docs: {
                description: 'Disallow certain triple slash directives in favor of ES6-style import declarations',
                recommended: 'recommended',
                url: 'https://typescript-eslint.io/rules/triple-slash-reference'
              },
              messages: {
                tripleSlashReference: 'Do not use a triple slash reference for {{module}}, use `import` style instead.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    lib: { type: 'string', enum: [ 'always', 'never' ] },
                    path: { type: 'string', enum: [ 'always', 'never' ] },
                    types: {
                      type: 'string',
                      enum: [ 'always', 'never', 'prefer-import' ]
                    }
                  },
                  additionalProperties: false
                }
              ]
            }
          },
          typedef: {
            create: [Function: create],
            defaultOptions: [
              {
                arrayDestructuring: false,
                arrowParameter: false,
                memberVariableDeclaration: false,
                objectDestructuring: false,
                parameter: false,
                propertyDeclaration: false,
                variableDeclaration: false,
                variableDeclarationIgnoreFunction: false
              }
            ],
            meta: {
              docs: {
                description: 'Require type annotations in certain places',
                url: 'https://typescript-eslint.io/rules/typedef'
              },
              messages: {
                expectedTypedef: 'Expected a type annotation.',
                expectedTypedefNamed: 'Expected {{name}} to have a type annotation.'
              },
              schema: [
                {
                  type: 'object',
                  additionalProperties: false,
                  properties: {
                    arrayDestructuring: { type: 'boolean' },
                    arrowParameter: { type: 'boolean' },
                    memberVariableDeclaration: { type: 'boolean' },
                    objectDestructuring: { type: 'boolean' },
                    parameter: { type: 'boolean' },
                    propertyDeclaration: { type: 'boolean' },
                    variableDeclaration: { type: 'boolean' },
                    variableDeclarationIgnoreFunction: { type: 'boolean' }
                  }
                }
              ],
              type: 'suggestion'
            }
          },
          'unbound-method': {
            create: [Function: create],
            defaultOptions: [ { ignoreStatic: false } ],
            meta: {
              docs: {
                description: 'Enforce unbound methods are called with their expected scope',
                recommended: 'recommended',
                requiresTypeChecking: true,
                url: 'https://typescript-eslint.io/rules/unbound-method'
              },
              messages: {
                unbound: 'Avoid referencing unbound methods which may cause unintentional scoping of `this`.',
                unboundWithoutThisAnnotation: 'Avoid referencing unbound methods which may cause unintentional scoping of `this`.\n' +
                  'If your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.'
              },
              schema: [
                {
                  type: 'object',
                  properties: {
                    ignoreStatic: {
                      description: 'Whether to skip checking whether `static` methods are correctly bound.',
                      type: 'boolean'
                    }
                  },
                  additionalProperties: false
                }
              ],
              type: 'problem'
            }
          },
          'unified-signatures': {
            create: [Function: create],
            defaultOptions: [ { ignoreDifferentlyNamedParameters: false } ],
            meta: {
              docs: {
                description: 'Disallow two overloads that could be unified into one with a union or an optional/rest parameter',
                recommended: 'strict',
                url: 'https://typescript-eslint.io/rules/unified-signatures'
              },
              type: 'suggestion',
              messages: {
                omittingRestParameter: '{{failureStringStart}} with a rest parameter.',
                omittingSingleParameter: '{{failureStringStart}} with an optional parameter.',
                singleParameterDifference: '{{failureStringStart}} taking `{{type1}} | {{type2}}`.'
              },
              schema: [
                {
                  additionalProperties: false,
                  properties: {
                    ignoreDifferentlyNamedParameters: {
                      description: 'Whether two parameters with different names at the same index should be considered different even if their types are the same.',
                      type: 'boolean'
                    }
                  },
                  type: 'object'
                }
              ]
            }
          },
          'use-unknown-in-catch-callback-variable': {
            create: [Function: create],
            defaultOptions: [],
            meta: {
              docs: {
                description: 'Enforce typing arguments in `.catch()` callbacks as `unknown`',
                requiresTypeChecking: true,
                recommended: 'strict',
                url: 'https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable'
              },
              type: 'suggestion',
              messages: {
                useUnknown: 'Prefer the safe `: unknown` for a catch callback variable.',
                useUnknownArrayDestructuringPattern: 'Prefer the safe `: unknown` for a catch callback variable. The thrown error may not be iterable.',
                useUnknownObjectDestructuringPattern: 'Prefer the safe `: unknown` for a catch callback variable. The thrown error may be nullable, or may not have the expected shape.',
                useUnknownSpreadArgs: 'Prefer the safe `: unknown` for a catch callback variable. The argument list may contain a handler that does not use `unknown` for the catch callback variable.',
                addUnknownTypeAnnotationSuggestion: 'Add an explicit `: unknown` type annotation to the catch variable.',
                addUnknownRestTypeAnnotationSuggestion: 'Add an explicit `: [unknown]` type annotation to the catch rest variable.',
                wrongTypeAnnotationSuggestion: 'Change existing type annotation to `: unknown`.',
                wrongRestTypeAnnotationSuggestion: 'Change existing type annotation to `: [unknown]`.'
              },
              fixable: 'code',
              schema: [],
              hasSuggestions: true
            }
          }
        }
      }
    },
    files: [ '**/*.ts', '**/*.tsx' ]
  },
  {
    files: [ '**/*.ts', '**/*.tsx' ],
    rules: {
      'constructor-super': 'off',
      'getter-return': 'off',
      'no-const-assign': 'off',
      'no-dupe-args': 'off',
      'no-dupe-class-members': 'off',
      'no-dupe-keys': 'off',
      'no-func-assign': 'off',
      'no-import-assign': 'off',
      'no-new-symbol': 'off',
      'no-new-native-nonconstructor': 'off',
      'no-obj-calls': 'off',
      'no-redeclare': 'off',
      'no-setter-return': 'off',
      'no-this-before-super': 'off',
      'no-undef': 'off',
      'no-unreachable': 'off',
      'no-unsafe-negation': 'off',
      'no-var': 'error',
      'prefer-const': 'error',
      'prefer-rest-params': 'error',
      'prefer-spread': 'error'
    },
    name: 'typescript-eslint/eslint-recommended'
  },
  {
    name: 'typescript-eslint/strict-type-checked',
    rules: {
      '@typescript-eslint/await-thenable': 'error',
      '@typescript-eslint/ban-ts-comment': [ 'error', { minimumDescriptionLength: 10 } ],
      '@typescript-eslint/ban-types': 'error',
      'no-array-constructor': 'off',
      '@typescript-eslint/no-array-constructor': 'error',
      '@typescript-eslint/no-array-delete': 'error',
      '@typescript-eslint/no-base-to-string': 'error',
      '@typescript-eslint/no-confusing-void-expression': 'error',
      '@typescript-eslint/no-duplicate-enum-values': 'error',
      '@typescript-eslint/no-duplicate-type-constituents': 'error',
      '@typescript-eslint/no-dynamic-delete': 'error',
      '@typescript-eslint/no-empty-object-type': 'error',
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-extra-non-null-assertion': 'error',
      '@typescript-eslint/no-extraneous-class': 'error',
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/no-for-in-array': 'error',
      'no-implied-eval': 'off',
      '@typescript-eslint/no-implied-eval': 'error',
      '@typescript-eslint/no-invalid-void-type': 'error',
      '@typescript-eslint/no-meaningless-void-operator': 'error',
      '@typescript-eslint/no-misused-new': 'error',
      '@typescript-eslint/no-misused-promises': 'error',
      '@typescript-eslint/no-mixed-enums': 'error',
      '@typescript-eslint/no-namespace': 'error',
      '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
      '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
      '@typescript-eslint/no-non-null-assertion': 'error',
      '@typescript-eslint/no-redundant-type-constituents': 'error',
      '@typescript-eslint/no-require-imports': 'error',
      '@typescript-eslint/no-this-alias': 'error',
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
      '@typescript-eslint/no-unnecessary-condition': 'error',
      '@typescript-eslint/no-unnecessary-template-expression': 'error',
      '@typescript-eslint/no-unnecessary-type-arguments': 'error',
      '@typescript-eslint/no-unnecessary-type-assertion': 'error',
      '@typescript-eslint/no-unnecessary-type-constraint': 'error',
      '@typescript-eslint/no-unsafe-argument': 'error',
      '@typescript-eslint/no-unsafe-assignment': 'error',
      '@typescript-eslint/no-unsafe-call': 'error',
      '@typescript-eslint/no-unsafe-declaration-merging': 'error',
      '@typescript-eslint/no-unsafe-enum-comparison': 'error',
      '@typescript-eslint/no-unsafe-member-access': 'error',
      '@typescript-eslint/no-unsafe-return': 'error',
      '@typescript-eslint/no-unsafe-unary-minus': 'error',
      'no-unused-expressions': 'off',
      '@typescript-eslint/no-unused-expressions': 'error',
      'no-unused-vars': 'off',
      '@typescript-eslint/no-unused-vars': 'error',
      'no-useless-constructor': 'off',
      '@typescript-eslint/no-useless-constructor': 'error',
      'no-throw-literal': 'off',
      '@typescript-eslint/only-throw-error': 'error',
      '@typescript-eslint/prefer-as-const': 'error',
      '@typescript-eslint/prefer-literal-enum-member': 'error',
      '@typescript-eslint/prefer-namespace-keyword': 'error',
      'prefer-promise-reject-errors': 'off',
      '@typescript-eslint/prefer-promise-reject-errors': 'error',
      '@typescript-eslint/prefer-reduce-type-parameter': 'error',
      '@typescript-eslint/prefer-return-this-type': 'error',
      'require-await': 'off',
      '@typescript-eslint/require-await': 'error',
      '@typescript-eslint/restrict-plus-operands': [
        'error',
        {
          allowAny: false,
          allowBoolean: false,
          allowNullish: false,
          allowNumberAndString: false,
          allowRegExp: false
        }
      ],
      '@typescript-eslint/restrict-template-expressions': [
        'error',
        {
          allowAny: false,
          allowBoolean: false,
          allowNullish: false,
          allowNumber: false,
          allowRegExp: false,
          allowNever: false
        }
      ],
      '@typescript-eslint/triple-slash-reference': 'error',
      '@typescript-eslint/unbound-method': 'error',
      '@typescript-eslint/unified-signatures': 'error',
      '@typescript-eslint/use-unknown-in-catch-callback-variable': 'error'
    },
    files: [ '**/*.ts', '**/*.tsx' ]
  },
  {
    name: 'typescript-eslint/stylistic-type-checked',
    rules: {
      '@typescript-eslint/adjacent-overload-signatures': 'error',
      '@typescript-eslint/array-type': 'error',
      '@typescript-eslint/ban-tslint-comment': 'error',
      '@typescript-eslint/class-literal-property-style': 'error',
      '@typescript-eslint/consistent-generic-constructors': 'error',
      '@typescript-eslint/consistent-indexed-object-style': 'error',
      '@typescript-eslint/consistent-type-assertions': 'error',
      '@typescript-eslint/consistent-type-definitions': 'error',
      'dot-notation': 'off',
      '@typescript-eslint/dot-notation': 'error',
      '@typescript-eslint/no-confusing-non-null-assertion': 'error',
      'no-empty-function': 'off',
      '@typescript-eslint/no-empty-function': 'error',
      '@typescript-eslint/no-inferrable-types': 'error',
      '@typescript-eslint/non-nullable-type-assertion-style': 'error',
      '@typescript-eslint/prefer-find': 'error',
      '@typescript-eslint/prefer-for-of': 'error',
      '@typescript-eslint/prefer-function-type': 'error',
      '@typescript-eslint/prefer-includes': 'error',
      '@typescript-eslint/prefer-nullish-coalescing': 'error',
      '@typescript-eslint/prefer-optional-chain': 'error',
      '@typescript-eslint/prefer-regexp-exec': 'error',
      '@typescript-eslint/prefer-string-starts-ends-with': 'error'
    },
    files: [ '**/*.ts', '**/*.tsx' ]
  },
  {
    languageOptions: {
      parserOptions: {
        projectService: true,
        tsconfigRootDir: '/home/bdiehl/Code/linter/packages/eslint-config/src'
      }
    },
    files: [ '**/*.ts', '**/*.tsx' ]
  },
  {
    ignores: [ '**/dist/**', '**/build/**', '**/.vscode/**', '**/coverage/**' ]
  }
]

/home/bdiehl/Code/linter/eslint.config.js
   2:1  warning  Expected "node:util" to come before "@diba1013/eslint-config"  perfectionist/sort-imports
   4:1  error    'console' is not defined                                       no-undef
  11:3  error    Use `undefined` instead of `null`                              unicorn/no-null

/home/bdiehl/Code/linter/packages/eslint-config/src/recommended.js
   3:1   warning  Expected "eslint-plugin-jsonc" to come before "typescript-eslint"  perfectionist/sort-imports
  48:32  error    'process' is not defined                                           no-undef

✖ 5 problems (3 errors, 2 warnings)
  0 errors and 2 warnings potentially fixable with the `--fix` option.

 ELIFECYCLE  Command failed with exit code 1.
